"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Google Search –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

–ó–∞–ø—É—Å–∫:
    python test_google_search.py
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from legaltechkz.tools.adilet_search import AdiletSearchTool


def test_google_search():
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google"""
    print("=" * 80)
    print("–¢–ï–°–¢: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google —Å site:adilet.zan.kz")
    print("=" * 80)

    tool = AdiletSearchTool()

    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    query = "–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å"

    print(f"\nüîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫: '{query}'")
    print("-" * 80)

    result = tool.execute(query=query, doc_type="code", status="active")

    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"   –°—Ç–∞—Ç—É—Å: {result.get('status')}")
    print(f"   –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {result.get('result_count', 0)}")

    if result.get('status') == 'success' and result.get('results'):
        print(f"\nüìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã:\n")
        for i, doc in enumerate(result['results'][:5], 1):  # –ü–µ—Ä–≤—ã–µ 5
            print(f"   {i}. {doc.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:80]}")
            print(f"      URL: {doc.get('url', '–ù–µ—Ç URL')}")
            print(f"      –ù–æ–º–µ—Ä: {doc.get('number', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"      –î–∞—Ç–∞: {doc.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
            print(f"      –°—Ç–∞—Ç—É—Å: {doc.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"      –ò—Å—Ç–æ—á–Ω–∏–∫: {doc.get('source', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print()
    else:
        error = result.get('error', result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
        print(f"\n   ‚ùå –û—à–∏–±–∫–∞: {error}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ Google
    if result.get('results'):
        first_result = result['results'][0]
        if 'Google Search' in first_result.get('source', ''):
            print("‚úÖ –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google Search —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            print("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –∏–∑ Google Search")

    return result


def test_different_queries():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\n" + "=" * 80)
    print("–¢–ï–°–¢: –†–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
    print("=" * 80)

    tool = AdiletSearchTool()

    queries = [
        ("–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "code", "active"),
        ("–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å", "code", "active"),
        ("–ó–∞–∫–æ–Ω –æ —è–∑—ã–∫–∞—Ö", "law", "all"),
    ]

    for query, doc_type, status in queries:
        print(f"\nüîç –ó–∞–ø—Ä–æ—Å: '{query}' (—Ç–∏–ø: {doc_type}, —Å—Ç–∞—Ç—É—Å: {status})")
        result = tool.execute(query=query, doc_type=doc_type, status=status)
        count = result.get('result_count', 0)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {count}")

        if count > 0:
            first = result['results'][0]
            print(f"   –ü–µ—Ä–≤—ã–π: {first.get('title', '')[:60]}...")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {first.get('source', '')}")


if __name__ == "__main__":
    print("\n")
    print("‚ïî" + "=" * 78 + "‚ïó")
    print("‚ïë" + " " * 18 + "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GOOGLE SEARCH –ò–ù–¢–ï–ì–†–ê–¶–ò–ò" + " " * 23 + "‚ïë")
    print("‚ïö" + "=" * 78 + "‚ïù")
    print()

    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
        result = test_google_search()

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        test_different_queries()

        print("\n" + "=" * 80)
        print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("=" * 80)

        if result.get('status') == 'success':
            print("\n‚úÖ Google Search –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("\n‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Google –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–æ–º")
            print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
