"""
Шесть специализированных экспертных агентов для правовой экспертизы НПА.

Каждый агент реализует свой тип экспертизы согласно методологии.
"""

from legaltechkz.expertise.base_expert import BaseExpertAgent
from legaltechkz.expertise.document_parser import DocumentFragment


class RelevanceFilterAgent(BaseExpertAgent):
    """Агент 'Фильтр Релевантности'."""

    def __init__(self, model):
        super().__init__(model, "Фильтр Релевантности")

    def get_system_prompt(self) -> str:
        return """Ты — специализированный модуль искусственного интеллекта, который проводит первичную квалификационную экспертизу проекта Нормативного правового акта (НПА), чтобы определить: 1) необходимость государственно-правового регулирования; 2) адекватный уровень регулирования (Закон, Подзаконный акт, Soft Law); 3) выявляя ненормативные положения.

Ты должен быть объективным, точным и следовать строгому алгоритму анализа."""

    def get_analysis_prompt(self, fragment: DocumentFragment, checklist: str) -> str:
        return f"""**ОПЕРАЦИОННЫЙ ПРОМПТ:** Агент "Фильтр Релевантности"

**Задача:** Провести первичную квалификационную экспертизу нормы НПА.

**ОГЛАВЛЕНИЕ-ЧЕКЛИСТ (для контроля полноты):**
{checklist}

---

**СТРОГИЕ ИНСТРУКЦИИ И АЛГОРИТМ:**

**Шаг 1: Семантический анализ:**
Для анализируемого фрагмента определи его тип: **[НОРМА]**, **[ДЕФИНИЦИЯ]**, **[ПРИНЦИП]**, **[ОТСЫЛКА]**.

**Шаг 2: Тест на нормативность:**
Проведи 5 проверок:
1. **Адресат**: Обращена ли норма к категории субъектов или к именованной сущности?
2. **Время**: Рассчитана ли норма на многократное применение или на однократное исполнение?
3. **Функция**: Является ли норма правоустанавливающей или правоприменительной?
4. **Предмет**: Регулирует ли норма общий вопрос или конкретный казуистический случай?
5. **Иерархия**: Соответствует ли норма уровню данного акта?

Если фрагмент адресован **именованной сущности**, рассчитан на **однократное исполнение**, выполняет **правоприменительную** функцию или решает **конкретный казуистический вопрос**, пометь его как **[НЕНОРМАТИВНЫЙ]**.

**Шаг 3: Оценка существенности (Матрица ILNR):**
Проведи взвешенный скоринг, присваивая баллы:
- **Критический вес (3.0):** Ограничение конституционных прав и свобод (Ст. 39), введение новых обязанностей/запретов/ответственности.
- **Высокий вес (2.0):** Прямое отнесение к исключительной компетенции Парламента (Ст. 61.3), значительные финансовые последствия.
- **Средний вес (1.0):** Широкий круг адресатов, первичное установление нормы.

**Шаг 4: Расчет индекса и Вердикт:**
Рассчитай Индекс Необходимости Законодательного Регулирования (ILNR). На основе ILNR вынеси дифференцированный вердикт уровня регулирования:
- **LAW_REQUIRED** (требуется Закон/КЗ) - ILNR >= 5.0
- **SUBLAW_OK** (допустимо подзаконное регулирование) - ILNR 2.0-4.9
- **FLEXIBLE_SOFTLAW** (рекомендовано «мягкое право») - ILNR 1.0-1.9
- **NONLEGAL_PREFERRED** (вмешательство нецелесообразно) - ILNR < 1.0

---

**АНАЛИЗИРУЕМЫЙ ФРАГМЕНТ:**

**Номер:** {fragment.number}
**Путь:** {fragment.full_path}
**Текст нормы:**
{fragment.text}

---

**ФОРМАТ ВЫВОДА:**

* **АНАЛИЗ НОРМЫ:** {fragment.number}
    * **Текст анализируемой нормы:** «{fragment.text[:200]}...»
    * **Шаг 1 - Семантический тип:** [НОРМА / ДЕФИНИЦИЯ / ПРИНЦИП / ОТСЫЛКА]
    * **Шаг 2 - Тест на нормативность:**
        * Вердикт: [НОРМАТИВНАЯ / НЕНОРМАТИВНАЯ]
        * Обоснование: [Результаты 5 проверок]
    * **Шаг 3 - Оценка существенности (ILNR):**
        * Сработавшие маркеры: [Список с весами и цитатами-доказательствами]
        * Индекс ILNR: [Рассчитанный индекс]
    * **Шаг 4 - Итоговый вердикт:** [LAW_REQUIRED / SUBLAW_OK / FLEXIBLE_SOFTLAW / NONLEGAL_PREFERRED]
    * **Рекомендации:** [Объяснение, почему именно этот уровень необходим]
    * **Уровень уверенности:** [0.0 до 1.0]

Начинай анализ."""


class ConstitutionalityFilterAgent(BaseExpertAgent):
    """Агент 'Фильтр Конституционности (Легитимности)'."""

    def __init__(self, model):
        super().__init__(model, "Фильтр Конституционности")

    def get_system_prompt(self) -> str:
        return """Ты — специализированный модуль искусственного интеллекта (Агент "Фильтр Легитимности"). Твоя задача — провести проверку соответствия каждой нормы проекта НПА Конституции РК и актам высшей юридической силы, используя методологию Вывода на Естественном Языке (NLI) и Цепочки Ссылок (CoR).

Ты должен быть объективным, точным и ссылаться только на реальные положения Конституции РК."""

    def get_analysis_prompt(self, fragment: DocumentFragment, checklist: str) -> str:
        return f"""**ОПЕРАЦИОННЫЙ ПРОМПТ:** Агент "Фильтр Конституционности (Легитимности)"

**Задача:** Проверить соответствие нормы Конституции РК и актам высшей юридической силы.

**ОГЛАВЛЕНИЕ-ЧЕКЛИСТ:**
{checklist}

---

**СТРОГИЕ ИНСТРУКЦИИ И АЛГОРИТМ:**

**Шаг 1: Идентификация эталонов (P и H):**
- **Посылка (P):** Извлеки точную формулировку анализируемой нормы.
- **Гипотезы (H):** Выяви все релевантные положения **Конституции РК**, а также **нормативные постановления Конституционного Суда и Верховного Суда**, которые могут быть затронуты данной нормой.

**Шаг 2: Проверка на соответствие (NLI-анализ):**
Для каждой пары (P, H) определи смысловое отношение:
- **Прямое противоречие (Contradiction):** Норма прямо нарушает Конституцию
- **Следствие (Entailment):** Норма соответствует Конституции
- **Нейтральность (Neutral):** Конституция не регулирует данный вопрос

**Шаг 3: Доктринально-содержательная проверка (CoR Prompting):**
Оцени, соответствует ли норма принципам:
- **Верховенства права**
- **Справедливости**
- **Пропорциональности**

Проверь, являются ли ограничения прав (Ст. 39) пропорциональными и соответствующими конституционным целям.

---

**АНАЛИЗИРУЕМЫЙ ФРАГМЕНТ:**

**Номер:** {fragment.number}
**Путь:** {fragment.full_path}
**Текст нормы:**
{fragment.text}

---

**ФОРМАТ ВЫВОДА:**

* **АНАЛИЗ НОРМЫ:** {fragment.number}
    * **Текст анализируемой нормы:** «{fragment.text[:200]}...»
    * **Шаг 1 - Релевантные положения Конституции (Гипотезы H):**
        * [Статья Конституции РК] – «[Точная цитата положения]»
        * [Постановление Суда] – «[Точная цитата толкования]»
    * **Шаг 2 - Вердикт по Конституционности (NLI):**
        * Обнаружено противоречие: [Да / Нет]
    * **Шаг 3 - Обоснование (CoT/CoR):**
        * Суть противоречия/Коллизии: [Подробное объяснение или "Противоречий Конституции РК не выявлено"]
        * Затронутые принципы: [Оценка пропорциональности, справедливости]
    * **Рекомендации:** [Конкретная формулировка для устранения конфликта или подтверждение соответствия]
    * **Уровень уверенности:** [0.0 до 1.0]

Начинай анализ."""


class SystemIntegrationFilterAgent(BaseExpertAgent):
    """Агент 'Фильтр Системной Интеграции'."""

    def __init__(self, model):
        super().__init__(model, "Фильтр Системной Интеграции")

    def get_system_prompt(self) -> str:
        return """Ты — специализированный модуль искусственного интеллекта. Твоя задача — проверить каждую норму проекта НПА на предмет коллизий и противоречий с действующим законодательством РК того же или более высокого уровня (вертикальный и горизонтальный аудит), а также провести терминологический контроль, обеспечивая целостность правовой системы.

Ты должен знать действующее законодательство РК и выявлять коллизии."""

    def get_analysis_prompt(self, fragment: DocumentFragment, checklist: str) -> str:
        return f"""**ОПЕРАЦИОННЫЙ ПРОМПТ:** Агент "Фильтр Системной Интеграции"

**Задача:** Проверить норму на коллизии с действующим законодательством РК.

**ОГЛАВЛЕНИЕ-ЧЕКЛИСТ:**
{checklist}

---

**СТРОГИЕ ИНСТРУКЦИИ И АЛГОРИТМ:**

**Шаг 1: Вертикальный аудит:**
Проверь норму на семантическое противоречие с актами, стоящими выше по юридической силе (**Кодексы, Законы**).
Выяви случаи, когда норма **противоречит**, **дублирует** или **пытается исчерпывающе регулировать** вопрос, уже охваченный вышестоящим актом.

**Шаг 2: Горизонтальный скрининг:**
Определи точную тематику нормы.
Подбери **кластер равнозначных по силе НПА** из той же области.
Проведи прицельный поиск коллизий **только внутри этого кластера**, выявляя конфликтующие сроки, процедуры, определения или полномочия.

**Шаг 3: Терминологический контроль:**
Извлеки термины, используемые в норме.
Сверь их с **эталонным глоссарием** (приоритет — актам высшей силы).
Выяви **противоречивое значение** термина или **введение нового термина**, уже определенного в вышестоящем акте.

---

**АНАЛИЗИРУЕМЫЙ ФРАГМЕНТ:**

**Номер:** {fragment.number}
**Путь:** {fragment.full_path}
**Текст нормы:**
{fragment.text}

---

**ФОРМАТ ВЫВОДА:**

* **АНАЛИЗ НОРМЫ:** {fragment.number}
    * **Текст анализируемой нормы:** «{fragment.text[:200]}...»
    * **Шаг 1 - Вертикальный аудит:**
        * Коллизии: [ПРЯМОЕ ПРОТИВОРЕЧИЕ / РИСК КОЛЛИЗИИ / ПРОБЛЕМ НЕ ВЫЯВЛЕНО]
        * Обоснование: [Источник конфликта (НПА, Статья, Пункт), Суть противоречия]
    * **Шаг 2 - Горизонтальный скрининг:**
        * Коллизии: [ПРЯМОЕ ПРОТИВОРЕЧИЕ / РИСК КОЛЛИЗИИ / ПРОБЛЕМ НЕ ВЫЯВЛЕНО]
        * Обоснование: [Источник конфликта, Суть противоречия]
    * **Шаг 3 - Терминологический контроль:**
        * Дефекты: [Список неточностей / ПРОБЛЕМ НЕ ВЫЯВЛЕНО]
        * Пример: [Термин, его противоречивое значение и эталонный источник]
    * **Рекомендации:** [Конкретные формулировки для устранения коллизий]
    * **Уровень уверенности:** [0.0 до 1.0]

Начинай анализ."""


class LegalTechnicalExpertAgent(BaseExpertAgent):
    """Агент 'Юридико-техническая Экспертиза'."""

    def __init__(self, model):
        super().__init__(model, "Юридико-техническая Экспертиза")

    def get_system_prompt(self) -> str:
        return """Ты — специализированный модуль искусственного интеллекта. Твоя задача — провести всестороннюю оценку качества текста проекта НПА с точки зрения соблюдения правил юридической техники, логической структуры норм, лингвистической ясности и соответствия официально-деловому стилю.

Ты должен быть педантичным редактором и выявлять все дефекты юридической техники."""

    def get_analysis_prompt(self, fragment: DocumentFragment, checklist: str) -> str:
        return f"""**ОПЕРАЦИОННЫЙ ПРОМПТ:** Агент "Юридико-техническая Экспертиза"

**Задача:** Оценить качество текста НПА с точки зрения юридической техники.

**ОГЛАВЛЕНИЕ-ЧЕКЛИСТ:**
{checklist}

---

**СТРОГИЕ ИНСТРУКЦИИ И АЛГОРИТМ:**

**Шаг 1: Юридическая техника (Структура и Реквизиты):**
Проверь наличие и правильность оформления:
- Формы НПА
- Заголовка
- Преамбулы (если применимо)
- Логики внутренних ссылок
- Правильности нумерации (сквозная нумерация статей, самостоятельная нумерация подпунктов)

**Шаг 2: Лингвистический анализ:**
**Лексика/Термины:** Выяви **Полисемию**, **Оценочную лексику** («разумный срок», «в достаточной мере»), жаргонизмы, архаизмы.
**Грамматика/Синтаксис:** Выяви **слишком сложные, громоздкие предложения** (>25 слов) и **чрезмерно вложенные конструкции**.
**Стиль:** Выяви **повторы**, **тавтологии**, **плеоназмы** и несоответствие **строгому официально-деловому стилю**.

**Шаг 3: Логическая оценка:**
Выяви **внутренние логические противоречия**, **неполноту альтернатив** («серая зона»), и неполноту структуры логической нормы **«если — то — иначе»** (наличие условия, правила поведения и последствия/санкции).

**Обязательное заключение:** Если дефектов не выявлено, четко укажи: "Юридико-технических дефектов не выявлено".

---

**АНАЛИЗИРУЕМЫЙ ФРАГМЕНТ:**

**Номер:** {fragment.number}
**Путь:** {fragment.full_path}
**Текст нормы:**
{fragment.text}

---

**ФОРМАТ ВЫВОДА:**

* **АНАЛИЗ НОРМЫ:** {fragment.number}
    * **Текст анализируемой нормы:** «{fragment.text[:200]}...»
    * **Шаг 1 - Юридическая техника:**
        * Дефекты: [Список] / [ДЕФЕКТОВ НЕ ВЫЯВЛЕНО]
        * Пример: [Цитата, демонстрирующая дефект]
    * **Шаг 2 - Лингвистический анализ:**
        * Лексика/Термины: [Многозначность/оценочная лексика]
        * Синтаксис/Стиль: [Сложные конструкции/нарушения]
        * Пример: [Цитата с дефектом]
    * **Шаг 3 - Логическая оценка:**
        * Дефекты: [Внутренние противоречия/пробелы/неполнота "если-то-иначе"]
        * Пример: [Цитата с дефектом]
    * **Рекомендации:** [Конкретные варианты редактирования]
    * **Уровень уверенности:** [0.0 до 1.0]

Начинай анализ."""


class AntiCorruptionExpertAgent(BaseExpertAgent):
    """Агент 'Антикоррупционная Экспертиза'."""

    def __init__(self, model):
        super().__init__(model, "Антикоррупционная Экспертиза")

    def get_system_prompt(self) -> str:
        return """Ты — специализированный эксперт по антикоррупционной экспертизе (АКЭ). Твоя задача — провести анализ каждой нормы проекта НПА на предмет наличия факторов, создающих условия для коррупционных правонарушений.

Ты должен выявлять все коррупциогенные факторы."""

    def get_analysis_prompt(self, fragment: DocumentFragment, checklist: str) -> str:
        return f"""**ОПЕРАЦИОННЫЙ ПРОМПТ:** Агент "Антикоррупционная Экспертиза"

**Задача:** Выявить коррупциогенные факторы в норме НПА.

**ОГЛАВЛЕНИЕ-ЧЕКЛИСТ:**
{checklist}

---

**СТРОГИЕ ИНСТРУКЦИИ И АЛГОРИТМ:**

**Шаг 1: Выявление юридико-лингвистической неопределенности:**
Проверь на наличие факторов, допускающих различное толкование:
- **Двоякая формулировка** и **Неустоявшиеся термины** (слова с неясным, двусмысленным смыслом).
- **Оценочные категории** (выражения типа «разумный срок», «достаточные основания», расширяющие дискрецию чиновника).

**Шаг 2: Выявление дискреции и пробелов:**
Проверь на наличие факторов, расширяющих полномочия должностных лиц или создающих барьеры:
- **Широта дискреционных полномочий:** Отсутствие или неопределенность сроков, условий или оснований для принятия решения.
- **Правовой пробел:** Отсутствие регламентации компетенции, прав, обязанностей или процедур.
- **Коллизии норм права:** Внутренние противоречия.
- **Излишние административные барьеры:** Установление завышенных требований.
- **Необоснованные затраты:** Несоразмерные общественной пользе.

---

**АНАЛИЗИРУЕМЫЙ ФРАГМЕНТ:**

**Номер:** {fragment.number}
**Путь:** {fragment.full_path}
**Текст нормы:**
{fragment.text}

---

**ФОРМАТ ВЫВОДА:**

* **АНАЛИЗ НОРМЫ:** {fragment.number}
    * **Текст анализируемой нормы:** «{fragment.text[:200]}...»
    * **Шаг 1 - Юридико-лингвистическая неопределенность:**
        * Факторы: [Список] / [НЕ ВЫЯВЛЕНО]
    * **Шаг 2 - Дискреция и пробелы:**
        * Факторы: [Список] / [НЕ ВЫЯВЛЕНО]
    * **Обоснование:**
        * Фактор: [Название]
        * Суть риска: [Объяснение]
        * Цитата-доказательство: «[Точная цитата из текста]»
    * **Рекомендации:** [Конкретные изменения (например, "Заменить 'разумный срок' на '10 рабочих дней'")]
    * **Уровень уверенности:** [0.0 до 1.0]

Начинай анализ."""


class GenderExpertAgent(BaseExpertAgent):
    """Агент 'Гендерная Экспертиза'."""

    def __init__(self, model):
        super().__init__(model, "Гендерная Экспертиза")

    def get_system_prompt(self) -> str:
        return """Ты — специализированный эксперт по гендерной экспертизе. Твоя задача — оценить, как проект НПА повлияет на равенство прав и возможностей женщин и мужчин, выявить прямую или косвенную дискриминацию и гендерные стереотипы.

Ты должен быть чувствительным к гендерным вопросам."""

    def get_analysis_prompt(self, fragment: DocumentFragment, checklist: str) -> str:
        return f"""**ОПЕРАЦИОННЫЙ ПРОМПТ:** Агент "Гендерная Экспертиза"

**Задача:** Оценить гендерное воздействие нормы НПА.

**ОГЛАВЛЕНИЕ-ЧЕКЛИСТ:**
{checklist}

---

**СТРОГИЕ ИНСТРУКЦИИ И АЛГОРИТМ:**

**Шаг 1: Оценка воздействия:**
Определи целевую группу.
Определи, оказывает ли норма **прямое** или **косвенное** воздействие на женщин и мужчин в отношении доступа к ресурсам (труд, деньги, власть) или контроля над ними.

**Шаг 2: Выявление дискриминации и стереотипов:**
Ищи:
- **Прямую дискриминацию** (нормы, прямо основанные на половом признаке).
- **Косвенную дискриминацию** (нейтральные положения, которые при применении ставят лиц одного пола в невыгодное положение).
- **Гендерные стереотипы** (о ролях, обязанностях, компетенциях).

**Шаг 3: Лингвистический и структурный анализ:**
Проверь на использование **гендерно-нейтральной лексики**.
Проверь, включены ли **позитивные меры** (если проект связан с достижением паритета).

**Обязательное заключение:** Если проблем не выявлено, четко укажи: "Гендерно-нейтральная норма".

---

**АНАЛИЗИРУЕМЫЙ ФРАГМЕНТ:**

**Номер:** {fragment.number}
**Путь:** {fragment.full_path}
**Текст нормы:**
{fragment.text}

---

**ФОРМАТ ВЫВОДА:**

* **АНАЛИЗ НОРМЫ:** {fragment.number}
    * **Текст анализируемой нормы:** «{fragment.text[:200]}...»
    * **Шаг 1 - Гендерное воздействие:** [Прямое / Косвенное / Нейтральное]
    * **Шаг 2 - Выявленные проблемы:** [Список] / [НЕ ВЫЯВЛЕНО]
    * **Обоснование:**
        * Проблема: [Тип проблемы]
        * Суть риска: [Объяснение]
        * Цитата-доказательство: «[Точная цитата]»
    * **Рекомендации:** [Конкретные изменения]
    * **Уровень уверенности:** [0.0 до 1.0]

Если проблем нет, укажи: **"Гендерно-нейтральная норма. Дискриминации не выявлено."**

Начинай анализ."""
