"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤.
"""

from abc import ABC, abstractmethod
from typing import Dict, Any, List, Optional
import logging
from concurrent.futures import ThreadPoolExecutor, as_completed
import time

from legaltechkz.expertise.document_parser import DocumentFragment
from legaltechkz.models.base.base_model import BaseModel

logger = logging.getLogger("legaltechkz.expertise.base_expert")


class BaseExpertAgent(ABC):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.

    –ö–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç —Å–≤–æ–π —Ç–∏–ø —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM.
    """

    def __init__(self, model: BaseModel, agent_name: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞.

        Args:
            model: –ú–æ–¥–µ–ª—å LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
            agent_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞.
        """
        self.model = model
        self.agent_name = agent_name
        self.analysis_results: List[Dict[str, Any]] = []

        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∞–≥–µ–Ω—Ç: {agent_name} (–º–æ–¥–µ–ª—å: {model.model_name})")

    @abstractmethod
    def get_system_prompt(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞.

        Returns:
            –¢–µ–∫—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.
        """
        pass

    @abstractmethod
    def get_analysis_prompt(self, fragment: DocumentFragment, checklist: str) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞.

        Args:
            fragment: –§—Ä–∞–≥–º–µ–Ω—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
            checklist: –û–≥–ª–∞–≤–ª–µ–Ω–∏–µ-—á–µ–∫–ª–∏—Å—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è.

        Returns:
            –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
        """
        pass

    def analyze_fragment(
        self,
        fragment: DocumentFragment,
        checklist: str
    ) -> Dict[str, Any]:
        """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ñ—Ä–∞–≥–º–µ–Ω—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞.

        Args:
            fragment: –§—Ä–∞–≥–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
            checklist: –û–≥–ª–∞–≤–ª–µ–Ω–∏–µ-—á–µ–∫–ª–∏—Å—Ç.

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞.
        """
        logger.info(f"[{self.agent_name}] –ê–Ω–∞–ª–∏–∑: {fragment.full_path}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        system_prompt = self.get_system_prompt()
        analysis_prompt = self.get_analysis_prompt(fragment, checklist)

        # –í—ã–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å
        try:
            response = self.model.generate(
                prompt=analysis_prompt,
                system_message=system_prompt,
                temperature=0.1,
                max_tokens=4000
            )

            result = {
                'agent': self.agent_name,
                'fragment_type': fragment.type,
                'fragment_number': fragment.number,
                'fragment_path': fragment.full_path,
                'analysis': response,
                'success': True
            }

            self.analysis_results.append(result)

            logger.info(f"[{self.agent_name}] –ê–Ω–∞–ª–∏–∑ {fragment.number} –∑–∞–≤–µ—Ä—à—ë–Ω")

            return result

        except Exception as e:
            logger.error(f"[{self.agent_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {fragment.number}: {e}")

            error_result = {
                'agent': self.agent_name,
                'fragment_type': fragment.type,
                'fragment_number': fragment.number,
                'fragment_path': fragment.full_path,
                'analysis': None,
                'error': str(e),
                'success': False
            }

            self.analysis_results.append(error_result)

            return error_result

    def analyze_batch(
        self,
        fragments: List[DocumentFragment],
        checklist: str,
        batch_size: int = 5,
        max_workers: int = 3
    ) -> List[Dict[str, Any]]:
        """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø–∞–º–∏ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.

        Args:
            fragments: –°–ø–∏—Å–æ–∫ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤.
            checklist: –û–≥–ª–∞–≤–ª–µ–Ω–∏–µ-—á–µ–∫–ª–∏—Å—Ç.
            batch_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5).
            max_workers: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3).

        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞.
        """
        total = len(fragments)
        total_batches = (total + batch_size - 1) // batch_size

        logger.info(f"[{self.agent_name}] –ù–∞—á–∞–ª–æ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ì–û batch-–∞–Ω–∞–ª–∏–∑–∞:")
        logger.info(f"[{self.agent_name}]   –§—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {total}")
        logger.info(f"[{self.agent_name}]   –†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã: {batch_size}")
        logger.info(f"[{self.agent_name}]   –ì—Ä—É–ø–ø: {total_batches}")
        logger.info(f"[{self.agent_name}]   –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {max_workers}")

        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
        batches = []
        for i in range(0, total, batch_size):
            batch = fragments[i:i + batch_size]
            batch_num = (i // batch_size) + 1
            batches.append((batch_num, batch))

        results = []
        start_time = time.time()

        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø
        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            future_to_batch = {
                executor.submit(self._analyze_batch_with_logging, batch_num, batch, checklist, total_batches): batch_num
                for batch_num, batch in batches
            }

            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            for future in as_completed(future_to_batch):
                batch_num = future_to_batch[future]
                try:
                    batch_results = future.result()
                    results.extend(batch_results)
                except Exception as e:
                    logger.error(f"[{self.agent_name}] –û—à–∏–±–∫–∞ –≤ –≥—Ä—É–ø–ø–µ {batch_num}: {e}")

        elapsed = time.time() - start_time

        logger.info(f"[{self.agent_name}] Batch-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:")
        logger.info(f"[{self.agent_name}]   –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}/{total}")
        logger.info(f"[{self.agent_name}]   –í—Ä–µ–º—è: {elapsed:.1f} —Å–µ–∫")
        logger.info(f"[{self.agent_name}]   –°–∫–æ—Ä–æ—Å—Ç—å: {total/elapsed:.1f} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤/—Å–µ–∫")

        return results

    def _analyze_batch_with_logging(
        self,
        batch_num: int,
        batch: List[DocumentFragment],
        checklist: str,
        total_batches: int
    ) -> List[Dict[str, Any]]:
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä—É–ø–ø—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è).

        Args:
            batch_num: –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
            batch: –§—Ä–∞–≥–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            checklist: –ß–µ–∫–ª–∏—Å—Ç
            total_batches: –í—Å–µ–≥–æ –≥—Ä—É–ø–ø

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä—É–ø–ø—ã
        """
        logger.info(f"[{self.agent_name}] üîÑ –ì—Ä—É–ø–ø–∞ {batch_num}/{total_batches}: –Ω–∞—á–∞–ª–∞—Å—å ({len(batch)} —Å—Ç–∞—Ç–µ–π)")

        batch_start = time.time()
        batch_results = self.analyze_fragment_group(batch, checklist)
        batch_time = time.time() - batch_start

        logger.info(f"[{self.agent_name}] ‚úÖ –ì—Ä—É–ø–ø–∞ {batch_num}/{total_batches}: –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({batch_time:.1f} —Å–µ–∫)")

        return batch_results

    def analyze_fragment_group(
        self,
        fragments: List[DocumentFragment],
        checklist: str
    ) -> List[Dict[str, Any]]:
        """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω –≤—ã–∑–æ–≤ LLM.

        Args:
            fragments: –ì—Ä—É–ø–ø–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ (–æ–±—ã—á–Ω–æ 5-10).
            checklist: –û–≥–ª–∞–≤–ª–µ–Ω–∏–µ-—á–µ–∫–ª–∏—Å—Ç.

        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞.
        """
        if len(fragments) == 1:
            # –î–ª—è –æ–¥–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –º–µ—Ç–æ–¥
            return [self.analyze_fragment(fragments[0], checklist)]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        system_prompt = self.get_system_prompt()

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –≤ –æ–¥–∏–Ω –ø—Ä–æ–º–ø—Ç
        fragments_text = "\n\n".join([
            f"### –§–†–ê–ì–ú–ï–ù–¢ {i+1}: {frag.number} ({frag.full_path})\n{frag.text}"
            for i, frag in enumerate(fragments)
        ])

        group_prompt = f"""**–ì–†–£–ü–ü–û–í–û–ô –ê–ù–ê–õ–ò–ó:** –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –ù–ü–ê –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.

**–û–ì–õ–ê–í–õ–ï–ù–ò–ï-–ß–ï–ö–õ–ò–°–¢:**
{checklist}

---

**–§–†–ê–ì–ú–ï–ù–¢–´ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:**

{fragments_text}

---

**–ò–ù–°–¢–†–£–ö–¶–ò–Ø:**
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ö–ê–ñ–î–´–ô —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–≤–æ–µ–π –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏.
–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

**–§–û–†–ú–ê–¢ –í–´–í–û–î–ê:**
–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –≤—ã–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

```
=== –ê–ù–ê–õ–ò–ó –§–†–ê–ì–ú–ï–ù–¢–ê: [–Ω–æ–º–µ—Ä] ===
[–ü–æ–ª–Ω—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≥–ª–∞—Å–Ω–æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏]
=== –ö–û–ù–ï–¶ –ê–ù–ê–õ–ò–ó–ê –§–†–ê–ì–ú–ï–ù–¢–ê: [–Ω–æ–º–µ—Ä] ===
```

–ù–∞—á–∏–Ω–∞–π –∞–Ω–∞–ª–∏–∑."""

        try:
            # –í—ã–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            response = self.model.generate(
                prompt=group_prompt,
                system_message=system_prompt,
                temperature=0.1,
                max_tokens=8000  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            )

            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results = []
            for fragment in fragments:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ - –∏—â–µ–º —Å–µ–∫—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–º–µ—Ä–∞
                fragment_analysis = self._extract_fragment_analysis(response, fragment.number)

                result = {
                    'agent': self.agent_name,
                    'fragment_type': fragment.type,
                    'fragment_number': fragment.number,
                    'fragment_path': fragment.full_path,
                    'analysis': fragment_analysis or response,  # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å - –≤–µ—Å—å –æ—Ç–≤–µ—Ç
                    'success': True,
                    'group_analysis': True  # –ú–∞—Ä–∫–µ—Ä —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑
                }

                self.analysis_results.append(result)
                results.append(result)

            logger.info(f"[{self.agent_name}] –ì—Ä—É–ø–ø–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω: {len(results)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")

            return results

        except Exception as e:
            logger.error(f"[{self.agent_name}] –û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

            # Fallback - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
            logger.warning(f"[{self.agent_name}] –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
            return [self.analyze_fragment(f, checklist) for f in fragments]

    def _extract_fragment_analysis(self, full_response: str, fragment_number: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ—á—å –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.

        Args:
            full_response: –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç LLM
            fragment_number: –ù–æ–º–µ—Ä —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è

        Returns:
            –¢–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –∏–ª–∏ None
        """
        try:
            # –ò—â–µ–º –º–∞—Ä–∫–µ—Ä—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
            import re

            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ–∫—Ü–∏–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
            pattern = rf"===\s*–ê–ù–ê–õ–ò–ó –§–†–ê–ì–ú–ï–ù–¢–ê:\s*{re.escape(fragment_number)}\s*===(.*?)===\s*–ö–û–ù–ï–¶ –ê–ù–ê–õ–ò–ó–ê –§–†–ê–ì–ú–ï–ù–¢–ê"

            match = re.search(pattern, full_response, re.DOTALL | re.IGNORECASE)

            if match:
                return match.group(1).strip()

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            return None

        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞–Ω–∞–ª–∏–∑ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ {fragment_number}: {e}")
            return None

    def get_results_summary(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–∞.

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å–≤–æ–¥–∫–æ–π.
        """
        total = len(self.analysis_results)
        successful = sum(1 for r in self.analysis_results if r.get('success', False))
        failed = total - successful

        return {
            'agent': self.agent_name,
            'total_analyzed': total,
            'successful': successful,
            'failed': failed,
            'success_rate': successful / total if total > 0 else 0.0
        }
