"""
ReAct –ê–≥–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ—Å—Ç–∏ –ù–ü–ê

–≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–≥–µ–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π:
1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—å—é –ù–ü–ê
2. –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ –∑–∞–∫–æ–Ω—ã
3. –ò—â–µ—Ç –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—é –†–ö
4. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω—É–∂–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏
5. –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏ –≤—ã—è–≤–ª—è–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è
6. –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
"""

from typing import Dict, Any
import logging

from legaltechkz.models.base.base_model import BaseModel
from legaltechkz.agents.react_agent import ReActAgent
from legaltechkz.agents.tools import (
    AdiletSearchTool,
    DocumentFetchTool,
    ReferenceExtractorTool
)
from legaltechkz.expertise.document_parser import DocumentFragment

logger = logging.getLogger("legaltechkz.agents.constitutionality")


class ConstitutionalityReActAgent:
    """
    ReAct –∞–≥–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ—Å—Ç–∏.

    –ê–≤—Ç–æ–Ω–æ–º–Ω–æ:
    - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—å—é
    - –ò–∑–≤–ª–µ–∫–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–∫–æ–Ω–æ–≤
    - –ò—â–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—é –†–ö
    - –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è
    - –í—ã—è–≤–ª—è–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è
    """

    def __init__(self, model: BaseModel):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞.

        Args:
            model: LLM –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
        """
        self.model = model

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tools = [
            AdiletSearchTool(),
            DocumentFetchTool(),
            ReferenceExtractorTool()
        ]

        # –°–æ–∑–¥–∞–µ–º ReAct –∞–≥–µ–Ω—Ç–∞
        self.agent = ReActAgent(
            model=model,
            tools=tools,
            agent_name="–§–∏–ª—å—Ç—Ä –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ—Å—Ç–∏ (ReAct)",
            max_iterations=10,
            verbose=True
        )

        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ConstitutionalityReActAgent")

    def analyze_article(self, article: DocumentFragment) -> Dict[str, Any]:
        """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏.

        Args:
            article: –§—Ä–∞–≥–º–µ–Ω—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—Å—Ç–∞—Ç—å—è)

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        logger.info(f"\n{'='*80}")
        logger.info(f"–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—å–∏: {article.full_path}")
        logger.info(f"{'='*80}\n")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        task = self._build_task(article)

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç
        context = {
            "article_number": article.number,
            "article_path": article.full_path,
            "article_text": article.text
        }

        # –ó–∞–ø—É—Å–∫–∞–µ–º ReAct –∞–≥–µ–Ω—Ç–∞
        result = self.agent.run(task=task, context=context)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
        if result["success"]:
            return {
                "success": True,
                "agent": "–§–∏–ª—å—Ç—Ä –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ—Å—Ç–∏ (ReAct)",
                "fragment_type": article.type,
                "fragment_number": article.number,
                "fragment_path": article.full_path,
                "analysis": result["answer"],
                "iterations": result["iterations"],
                "thinking_process": self._format_thinking_process(result["history"])
            }
        else:
            return {
                "success": False,
                "agent": "–§–∏–ª—å—Ç—Ä –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ—Å—Ç–∏ (ReAct)",
                "fragment_number": article.number,
                "error": result.get("answer", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            }

    def _build_task(self, article: DocumentFragment) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞."""
        return f"""–ü—Ä–æ–≤–µ–¥–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ç—å–∏ –ù–ü–ê –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –†–ö.

–°–¢–ê–¢–¨–Ø –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
–ù–æ–º–µ—Ä: {article.number}
–ü—É—Ç—å: {article.full_path}
–¢–µ–∫—Å—Ç:
{article.text}

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:

1. **–ò–∑–≤–ª–µ–∫–∏ —Å—Å—ã–ª–∫–∏**: –ù–∞–π–¥–∏ –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∑–∞–∫–æ–Ω–æ–≤, –∫–æ–¥–µ–∫—Å–æ–≤, –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç–∞—Ç—å–∏
   - –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç extract_references

2. **–ù–∞–π–¥–∏ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—é –†–ö**: –ï—Å–ª–∏ –≤ —Å—Ç–∞—Ç—å–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –∏–ª–∏ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç—Å—è –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞
   - –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç search_adilet —Å –∑–∞–ø—Ä–æ—Å–æ–º "–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω"

3. **–ó–∞–≥—Ä—É–∑–∏ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—é**: –ó–∞–≥—Ä—É–∑–∏ —Ç–µ–∫—Å—Ç –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –†–ö
   - –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç fetch_document —Å URL –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏

4. **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ**: –°—Ä–∞–≤–Ω–∏ —Å—Ç–∞—Ç—å—é –ù–ü–ê —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ —Å—Ç–∞—Ç—å—è–º–∏ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏:
   - –ü—Ä–æ–≤–µ—Ä—å –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–∞–≤ (—Å—Ç. 39 –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏)
   - –ü—Ä–æ–≤–µ—Ä—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é (—Å—Ç. 61 –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ - –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è –ü–∞—Ä–ª–∞–º–µ–Ω—Ç–∞)
   - –ü—Ä–æ–≤–µ—Ä—å –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è —Å –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏

5. **–ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è**: –ó–∞–≥—Ä—É–∑–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –¥–ª—è —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   - –ò—Å–ø–æ–ª—å–∑—É–π fetch_document —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º article_number

6. **–°—Ñ–æ—Ä–º–∏—Ä—É–π –∑–∞–∫–ª—é—á–µ–Ω–∏–µ**: –î–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å:
   - –í—ã–≤–æ–¥–æ–º (–°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ / –ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ / –¢–†–ï–ë–£–ï–¢ –£–¢–û–ß–ù–ï–ù–ò–Ø)
   - –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ –∏–∑ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏
   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)

–í–ê–ñ–ù–û:
- –ò—Å–ø–æ–ª—å–∑—É–π –†–ï–ê–õ–¨–ù–´–ï –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
- –¶–∏—Ç–∏—Ä—É–π –ö–û–ù–ö–†–ï–¢–ù–´–ï —Å—Ç–∞—Ç—å–∏ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ —Å –∏—Ö —Ç–µ–∫—Å—Ç–æ–º
- –ë—É–¥—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º
- –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

–ù–∞—á–∏–Ω–∞–π –∞–Ω–∞–ª–∏–∑!"""

    def _format_thinking_process(self, history: list) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º—ã—à–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

        Args:
            history: –ò—Å—Ç–æ—Ä–∏—è ReAct –∏—Ç–µ—Ä–∞—Ü–∏–π

        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è
        """
        formatted = []
        for entry in history:
            iteration = entry["iteration"]
            thought = entry["thought"][:300]  # –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤
            action = entry["action"]
            observation = entry["observation"]

            formatted.append(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {iteration}:")
            formatted.append(f"üß† Thought: {thought}...")
            formatted.append(f"‚ö° Action: {action.get('tool')} {action.get('params')}")
            formatted.append(f"üëÅÔ∏è Result: {observation.get('message', str(observation)[:200])}")
            formatted.append("")

        return "\n".join(formatted)

    def analyze_batch(
        self,
        articles: list,
        checklist: str,
        batch_size: int = 5,
        max_workers: int = 3
    ) -> list:
        """
        –ê–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø—ã —Å—Ç–∞—Ç–µ–π (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π).

        Args:
            articles: –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π
            checklist: –ß–µ–∫–ª–∏—Å—Ç (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ReAct)
            batch_size: –†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ReAct)
            max_workers: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ReAct)

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        """
        results = []

        logger.info(f"–ù–∞—á–∞–ª–æ ReAct –∞–Ω–∞–ª–∏–∑–∞ {len(articles)} —Å—Ç–∞—Ç–µ–π")

        for i, article in enumerate(articles, 1):
            logger.info(f"\n{'='*80}")
            logger.info(f"–°—Ç–∞—Ç—å—è {i}/{len(articles)}: {article.full_path}")
            logger.info(f"{'='*80}\n")

            result = self.analyze_article(article)
            results.append(result)

        logger.info(f"\n–ó–∞–≤–µ—Ä—à–µ–Ω ReAct –∞–Ω–∞–ª–∏–∑: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        return results
