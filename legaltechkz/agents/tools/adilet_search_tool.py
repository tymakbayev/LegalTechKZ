"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ adilet.zan.kz
"""

from typing import Dict, Any, List
import logging

from legaltechkz.agents.tools.base_tool import BaseTool
from legaltechkz.tools.adilet_search import AdiletSearchTool as AdiletSearch

logger = logging.getLogger("legaltechkz.agents.tools.adilet_search")


class AdiletSearchTool(BaseTool):
    """
    –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ù–ü–ê –Ω–∞ adilet.zan.kz

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≥–µ–Ω—Ç–æ–º –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ:
    - –ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ –∑–∞–∫–æ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    - –ù–∞–π—Ç–∏ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—é –†–ö
    - –ù–∞–π—Ç–∏ –ø–æ–¥–∑–∞–∫–æ–Ω–Ω—ã–µ –∞–∫—Ç—ã
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
        self.search_engine = AdiletSearch()
        super().__init__()

    def get_name(self) -> str:
        return "search_adilet"

    def get_description(self) -> str:
        return """–ü–æ–∏—Å–∫ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤—ã—Ö –∞–∫—Ç–æ–≤ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ adilet.zan.kz

–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ:
- –ù–∞–π—Ç–∏ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—é –†–ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
- –ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π –∑–∞–∫–æ–Ω, —É–ø–æ–º—è–Ω—É—Ç—ã–π –≤ —Å—Ç–∞—Ç—å–µ
- –ù–∞–π—Ç–∏ –ø–æ–¥–∑–∞–∫–æ–Ω–Ω—ã–π –∞–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π
- –ù–∞–π—Ç–∏ –∫–æ–¥–µ–∫—Å (–ù–∞–ª–æ–≥–æ–≤—ã–π, –£–≥–æ–ª–æ–≤–Ω—ã–π, –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∏ —Ç.–¥.)

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
- query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –†–ö", "–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å")
- doc_type (str): –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ - "all", "code", "law", "decree", "order" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "all")
- year (str): –ì–æ–¥ –ø—Ä–∏–Ω—è—Ç–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ URL"""

    def run(self, query: str, doc_type: str = "all", year: str = None) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –Ω–∞ adilet.zan.kz

        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            doc_type: –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
            year: –ì–æ–¥ –ø—Ä–∏–Ω—è—Ç–∏—è

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        """
        logger.info(f"üîç –ü–æ–∏—Å–∫ –Ω–∞ adilet.zan.kz: '{query}'")

        try:
            results = self.search_engine.search(
                query=query,
                doc_type=doc_type,
                year=year,
                status="active"
            )

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∞–≥–µ–Ω—Ç–∞
            if results and len(results) > 0:
                formatted_results = []
                for i, result in enumerate(results[:5], 1):  # –¢–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    formatted_results.append({
                        "rank": i,
                        "title": result.get("title", ""),
                        "url": result.get("url", ""),
                        "doc_type": result.get("doc_type", ""),
                        "date": result.get("date", "")
                    })

                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(formatted_results)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

                return {
                    "success": True,
                    "query": query,
                    "total_found": len(results),
                    "results": formatted_results,
                    "message": f"–ù–∞–π–¥–µ–Ω–æ {len(formatted_results)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'"
                }
            else:
                logger.warning(f"‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")
                return {
                    "success": False,
                    "query": query,
                    "results": [],
                    "message": f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return {
                "success": False,
                "query": query,
                "error": str(e),
                "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}"
            }
