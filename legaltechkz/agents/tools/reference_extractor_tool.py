"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –¥—Ä—É–≥–∏–µ –ù–ü–ê –∏–∑ —Ç–µ–∫—Å—Ç–∞
"""

from typing import Dict, Any, List
import logging
import re

from legaltechkz.agents.tools.base_tool import BaseTool

logger = logging.getLogger("legaltechkz.agents.tools.reference_extractor")


class ReferenceExtractorTool(BaseTool):
    """
    –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –¥—Ä—É–≥–∏–µ –ù–ü–ê.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∞–≥–µ–Ω—Ç —Ö–æ—á–µ—Ç:
    - –ù–∞–π—Ç–∏ –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∑–∞–∫–æ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
    - –ò–∑–≤–ª–µ—á—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—é
    - –ù–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–¥–µ–∫—Å–æ–≤ –∏ –ø–æ–¥–∑–∞–∫–æ–Ω–Ω—ã—Ö –∞–∫—Ç–æ–≤
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
        super().__init__()

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
        self.patterns = {
            "constitution": r"–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏[–∏—é—è–µ–π]\s+(?:–†–µ—Å–ø—É–±–ª–∏–∫–∏\s+)?–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞?",
            "code": r"([–ê-–Ø–∞-—è]+)\s+–∫–æ–¥–µ–∫—Å[–∞–µ—É]?",
            "law": r"–ó–∞–∫–æ–Ω[–∞–µ—É]?\s+(?:–†–µ—Å–ø—É–±–ª–∏–∫–∏\s+–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω\s+)?[¬´\"]([^¬ª\"]+)[¬ª\"]",
            "law_date": r"–ó–∞–∫–æ–Ω[–∞–µ—É]?\s+–†–ö\s+–æ—Ç\s+(\d{1,2}\s+\w+\s+\d{4}\s+–≥–æ–¥–∞)",
            "article_ref": r"—Å—Ç–∞—Ç—å[–∏–µ—è]\s+(\d+)",
            "paragraph_ref": r"–ø—É–Ω–∫—Ç[–∞—É–µ]?\s+(\d+)"
        }

    def get_name(self) -> str:
        return "extract_references"

    def get_description(self) -> str:
        return """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –¥—Ä—É–≥–∏–µ –ù–ü–ê –∏–∑ —Ç–µ–∫—Å—Ç–∞

–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ:
- –ù–∞–π—Ç–∏ –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∑–∞–∫–æ–Ω–æ–≤ –≤ —Å—Ç–∞—Ç—å–µ
- –ò–∑–≤–ª–µ—á—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—é –†–ö
- –ù–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–¥–µ–∫—Å–æ–≤ (–ù–∞–ª–æ–≥–æ–≤—ã–π, –£–≥–æ–ª–æ–≤–Ω—ã–π –∏ —Ç.–¥.)
- –ò–∑–≤–ª–µ—á—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏ –¥—Ä—É–≥–∏—Ö –∑–∞–∫–æ–Ω–æ–≤

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
- text (str): –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ —Å —Ç–∏–ø–∞–º–∏ (–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è, –ó–∞–∫–æ–Ω, –ö–æ–¥–µ–∫—Å, —Å—Ç–∞—Ç—å—è)"""

    def run(self, text: str) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ—á—å —Å—Å—ã–ª–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞.

        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        """
        logger.info(f"üìé –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞ ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")

        try:
            references = {
                "constitution": [],
                "codes": [],
                "laws": [],
                "articles": [],
                "paragraphs": []
            }

            # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—é
            constitution_matches = re.finditer(self.patterns["constitution"], text, re.IGNORECASE)
            for match in constitution_matches:
                references["constitution"].append({
                    "text": match.group(0),
                    "position": match.start()
                })

            # –ü–æ–∏—Å–∫ –∫–æ–¥–µ–∫—Å–æ–≤
            code_matches = re.finditer(self.patterns["code"], text, re.IGNORECASE)
            for match in code_matches:
                code_name = match.group(1)
                references["codes"].append({
                    "name": f"{code_name} –∫–æ–¥–µ–∫—Å",
                    "text": match.group(0),
                    "position": match.start()
                })

            # –ü–æ–∏—Å–∫ –∑–∞–∫–æ–Ω–æ–≤ (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)
            law_matches = re.finditer(self.patterns["law"], text, re.IGNORECASE)
            for match in law_matches:
                law_name = match.group(1)
                references["laws"].append({
                    "name": law_name,
                    "text": match.group(0),
                    "position": match.start()
                })

            # –ü–æ–∏—Å–∫ –∑–∞–∫–æ–Ω–æ–≤ (–ø–æ –¥–∞—Ç–µ)
            law_date_matches = re.finditer(self.patterns["law_date"], text, re.IGNORECASE)
            for match in law_date_matches:
                date = match.group(1)
                references["laws"].append({
                    "date": date,
                    "text": match.group(0),
                    "position": match.start()
                })

            # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç–∞—Ç—å–∏
            article_matches = re.finditer(self.patterns["article_ref"], text, re.IGNORECASE)
            for match in article_matches:
                article_num = match.group(1)
                references["articles"].append({
                    "number": int(article_num),
                    "text": match.group(0),
                    "position": match.start()
                })

            # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—É–Ω–∫—Ç—ã
            paragraph_matches = re.finditer(self.patterns["paragraph_ref"], text, re.IGNORECASE)
            for match in paragraph_matches:
                paragraph_num = match.group(1)
                references["paragraphs"].append({
                    "number": int(paragraph_num),
                    "text": match.group(0),
                    "position": match.start()
                })

            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            for key in references:
                unique_refs = []
                seen = set()
                for ref in references[key]:
                    ref_str = str(ref.get("text", ""))
                    if ref_str not in seen:
                        seen.add(ref_str)
                        unique_refs.append(ref)
                references[key] = unique_refs

            total_refs = sum(len(v) for v in references.values())

            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {total_refs} —Å—Å—ã–ª–æ–∫")
            logger.debug(f"   - –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è: {len(references['constitution'])}")
            logger.debug(f"   - –ö–æ–¥–µ–∫—Å—ã: {len(references['codes'])}")
            logger.debug(f"   - –ó–∞–∫–æ–Ω—ã: {len(references['laws'])}")
            logger.debug(f"   - –°—Ç–∞—Ç—å–∏: {len(references['articles'])}")

            return {
                "success": True,
                "total_references": total_refs,
                "references": references,
                "message": f"–ù–∞–π–¥–µ–Ω–æ {total_refs} —Å—Å—ã–ª–æ–∫ –Ω–∞ –¥—Ä—É–≥–∏–µ –ù–ü–ê"
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫: {e}")
            return {
                "success": False,
                "error": str(e),
                "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫: {e}"
            }
