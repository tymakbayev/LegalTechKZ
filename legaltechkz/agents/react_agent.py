"""
ReAct Agent - –ê–≥–µ–Ω—Ç —Å —Ü–∏–∫–ª–æ–º Reasoning and Acting

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
1. Thought (–ú—ã—à–ª–µ–Ω–∏–µ): –ê–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é –∏ —Ä–µ—à–∞–µ—Ç —á—Ç–æ –¥–µ–ª–∞—Ç—å
2. Action (–î–µ–π—Å—Ç–≤–∏–µ): –ê–≥–µ–Ω—Ç –≤—ã–±–∏—Ä–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ
3. Observation (–ù–∞–±–ª—é–¥–µ–Ω–∏–µ): –ê–≥–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è
4. Reflection (–†–µ—Ñ–ª–µ–∫—Å–∏—è): –ê–≥–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å

–¶–∏–∫–ª –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
"""

from typing import Dict, Any, List, Optional
import logging
import json
import re

from legaltechkz.models.base.base_model import BaseModel
from legaltechkz.agents.tools.base_tool import BaseTool

logger = logging.getLogger("legaltechkz.agents.react")


class ReActAgent:
    """
    –ê–≥–µ–Ω—Ç —Å —Ü–∏–∫–ª–æ–º Reasoning and Acting.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω ReAct –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á:
    - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é
    - –í—ã–±–∏—Ä–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    - –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    - –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ
    - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è
    """

    def __init__(
        self,
        model: BaseModel,
        tools: List[BaseTool],
        agent_name: str,
        max_iterations: int = 10,
        verbose: bool = True
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ReAct –∞–≥–µ–Ω—Ç–∞.

        Args:
            model: LLM –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
            tools: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            agent_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
            max_iterations: –ú–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π ReAct —Ü–∏–∫–ª–∞
            verbose: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        """
        self.model = model
        self.tools = {tool.name: tool for tool in tools}
        self.agent_name = agent_name
        self.max_iterations = max_iterations
        self.verbose = verbose

        self.memory: List[Dict[str, Any]] = []
        self.current_task = None

        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ReAct –∞–≥–µ–Ω—Ç: {agent_name}")
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(self.tools)}")
        for tool_name in self.tools.keys():
            logger.info(f"  - {tool_name}")

    def run(self, task: str, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ReAct —Ü–∏–∫–ª–∞.

        Args:
            task: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        """
        self.current_task = task
        self.memory = []
        context = context or {}

        logger.info(f"\n{'='*80}")
        logger.info(f"[{self.agent_name}] –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {task[:100]}...")
        logger.info(f"{'='*80}\n")

        # ReAct —Ü–∏–∫–ª
        for iteration in range(1, self.max_iterations + 1):
            logger.info(f"\n--- –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration}/{self.max_iterations} ---\n")

            # 1. THOUGHT: –ß—Ç–æ –∞–≥–µ–Ω—Ç –¥—É–º–∞–µ—Ç –¥–µ–ª–∞—Ç—å
            thought = self._generate_thought(task, context)
            self._log_thought(thought, iteration)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if self._is_final_answer(thought):
                final_answer = self._extract_final_answer(thought)
                logger.info(f"\nüéØ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration}")
                return self._build_result(final_answer, success=True)

            # 2. ACTION: –ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å
            action = self._parse_action(thought)
            if not action:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                continue

            self._log_action(action, iteration)

            # 3. OBSERVATION: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            observation = self._execute_action(action)
            self._log_observation(observation, iteration)

            # 4. REFLECTION: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
            self.memory.append({
                "iteration": iteration,
                "thought": thought,
                "action": action,
                "observation": observation
            })

        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π
        logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏–π ({self.max_iterations})")
        return self._build_result(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Ä–∞–º–∫–∞—Ö –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π",
            success=False
        )

    def _generate_thought(self, task: str, context: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—ã—Å–ª–∏ –∞–≥–µ–Ω—Ç–∞ (Thought).

        –ê–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç:
        - –¢–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
        - –ò—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π
        - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        - –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è
        system_prompt = self._build_system_prompt()
        user_prompt = self._build_thought_prompt(task, context)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –º–æ–¥–µ–ª–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ
        thought = self.model.generate(
            prompt=user_prompt,
            system_message=system_prompt,
            temperature=0.1,
            max_tokens=1000
        )

        return thought.strip()

    def _build_system_prompt(self) -> str:
        """–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞."""
        tools_description = "\n".join([
            f"- {tool.name}: {tool.description}"
            for tool in self.tools.values()
        ])

        return f"""–¢—ã - {self.agent_name}, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–∞–≤–æ–≤–æ–º—É –∞–Ω–∞–ª–∏–∑—É –ù–ü–ê –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞.

–¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ü–∏–∫–ª ReAct (Reasoning and Acting) –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á:

1. THOUGHT (–ú—ã—à–ª–µ–Ω–∏–µ): –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏—Ç—É–∞—Ü–∏—é –∏ —Ä–µ—à–∞–π —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ
2. ACTION (–î–µ–π—Å—Ç–≤–∏–µ): –í—ã–±–µ—Ä–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏ –≤—ã–ø–æ–ª–Ω–∏ –¥–µ–π—Å—Ç–≤–∏–µ
3. OBSERVATION (–ù–∞–±–ª—é–¥–µ–Ω–∏–µ): –ü–æ–ª—É—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
4. REFLECTION (–†–µ—Ñ–ª–µ–∫—Å–∏—è): –û–±–Ω–æ–≤–∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ

–î–û–°–¢–£–ü–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:
{tools_description}

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:

Thought: [–¢–≤–æ–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ]
Action: [–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞]
Action Input: [–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤ JSON]

–ò–õ–ò –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞:

Thought: –Ø —Å–æ–±—Ä–∞–ª –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≥–æ—Ç–æ–≤ –¥–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
Final Answer: [–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É]

–í–ê–ñ–ù–û:
- –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π —Å "Thought:"
- –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –ü—Ä–æ–≤–µ—Ä—è–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ –∑–∞–∫–æ–Ω—ã
- –ó–∞–≥—Ä—É–∂–∞–π —É–ø–æ–º—è–Ω—É—Ç—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
- –°—Ä–∞–≤–Ω–∏–≤–∞–π —Å—Ç–∞—Ç—å–∏ —Ä–∞–∑–Ω—ã—Ö –ù–ü–ê
- –î–∞–≤–∞–π –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã —Å —Ü–∏—Ç–∞—Ç–∞–º–∏"""

    def _build_thought_prompt(self, task: str, context: Dict[str, Any]) -> str:
        """–ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—ã—Å–ª–∏."""
        # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        history = ""
        if self.memory:
            history = "\n\n–ò–°–¢–û–†–ò–Ø –î–ï–ô–°–¢–í–ò–ô:\n"
            for entry in self.memory[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–µ–π—Å—Ç–≤–∏–π
                history += f"\n–ò—Ç–µ—Ä–∞—Ü–∏—è {entry['iteration']}:\n"
                history += f"Thought: {entry['thought'][:200]}...\n"
                history += f"Action: {entry['action'].get('tool', 'unknown')}\n"
                history += f"Observation: {str(entry['observation'])[:200]}...\n"

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
        context_str = ""
        if context:
            context_str = f"\n\n–ö–û–ù–¢–ï–ö–°–¢:\n{json.dumps(context, ensure_ascii=False, indent=2)}\n"

        return f"""–ó–ê–î–ê–ß–ê: {task}
{context_str}
{history}

–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ? (–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç Thought ‚Üí Action –∏–ª–∏ Final Answer)"""

    def _is_final_answer(self, thought: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ - —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–º."""
        return "Final Answer:" in thought or "–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:" in thought

    def _extract_final_answer(self, thought: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."""
        if "Final Answer:" in thought:
            return thought.split("Final Answer:")[1].strip()
        elif "–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:" in thought:
            return thought.split("–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:")[1].strip()
        return thought

    def _parse_action(self, thought: str) -> Optional[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –º—ã—Å–ª–∏ –∞–≥–µ–Ω—Ç–∞.

        –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:
        Action: tool_name
        Action Input: {"param": "value"}
        """
        try:
            # –ò—â–µ–º Action
            action_match = re.search(r'Action:\s*([^\n]+)', thought)
            if not action_match:
                return None

            tool_name = action_match.group(1).strip()

            # –ò—â–µ–º Action Input
            input_match = re.search(r'Action Input:\s*(\{[^}]+\})', thought, re.DOTALL)
            if input_match:
                try:
                    tool_params = json.loads(input_match.group(1))
                except json.JSONDecodeError:
                    # –ü—Ä–æ–±—É–µ–º –±–µ–∑ JSON
                    tool_params = {"input": input_match.group(1)}
            else:
                tool_params = {}

            return {
                "tool": tool_name,
                "params": tool_params
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
            return None

    def _execute_action(self, action: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è."""
        tool_name = action.get("tool", "").strip()
        params = action.get("params", {})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        if tool_name not in self.tools:
            logger.warning(f"‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{tool_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {
                "success": False,
                "error": f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{tool_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                "available_tools": list(self.tools.keys())
            }

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        try:
            tool = self.tools[tool_name]
            result = tool.run(**params)
            return result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {tool_name}: {e}")
            return {
                "success": False,
                "error": str(e)
            }

    def _build_result(self, answer: str, success: bool) -> Dict[str, Any]:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
        return {
            "success": success,
            "answer": answer,
            "agent": self.agent_name,
            "iterations": len(self.memory),
            "history": self.memory
        }

    def _log_thought(self, thought: str, iteration: int):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º—ã—Å–ª–∏."""
        if self.verbose:
            logger.info(f"üß† Thought (–∏—Ç–µ—Ä–∞—Ü–∏—è {iteration}):")
            logger.info(f"   {thought[:500]}{'...' if len(thought) > 500 else ''}\n")

    def _log_action(self, action: Dict[str, Any], iteration: int):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è."""
        if self.verbose:
            logger.info(f"‚ö° Action (–∏—Ç–µ—Ä–∞—Ü–∏—è {iteration}):")
            logger.info(f"   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {action.get('tool')}")
            logger.info(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {json.dumps(action.get('params', {}), ensure_ascii=False)}\n")

    def _log_observation(self, observation: Dict[str, Any], iteration: int):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è."""
        if self.verbose:
            logger.info(f"üëÅÔ∏è Observation (–∏—Ç–µ—Ä–∞—Ü–∏—è {iteration}):")
            obs_str = json.dumps(observation, ensure_ascii=False, indent=2)
            logger.info(f"   {obs_str[:500]}{'...' if len(obs_str) > 500 else ''}\n")
