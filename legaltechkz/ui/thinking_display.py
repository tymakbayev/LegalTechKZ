"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è live-–ª–æ–≥–æ–≤ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –≤ —Å—Ç–∏–ª–µ "Thinking..."

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞.
"""

import streamlit as st
import time
import os
from pathlib import Path
from typing import Optional


def display_live_logs(log_file_path: str, interval: float = 0.5, max_lines: int = 50):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç live-–ª–æ–≥–∏ –∏–∑ —Ñ–∞–π–ª–∞ —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º.

    Args:
        log_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
        interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        max_lines: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞
    """
    log_container = st.empty()
    last_size = 0

    while True:
        if os.path.exists(log_file_path):
            current_size = os.path.getsize(log_file_path)

            if current_size > last_size:
                # –ß–∏—Ç–∞–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
                with open(log_file_path, 'r', encoding='utf-8') as f:
                    f.seek(last_size)
                    new_content = f.read()

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                    log_container.code(new_content, language='log')

                last_size = current_size

        time.sleep(interval)


def create_thinking_expander(stage_name: str, log_content: str = "") -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç expander –≤ —Å—Ç–∏–ª–µ "Thinking..." –¥–ª—è —ç—Ç–∞–ø–∞ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã.

    Args:
        stage_name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞
        log_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    with st.expander(f"üß† {stage_name} - –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏", expanded=False):
        if log_content:
            # –ü–∞—Ä—Å–∏–º –ª–æ–≥–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ
            log_lines = log_content.split('\n')

            for line in log_lines[-50:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫
                if '[INFO]' in line:
                    st.markdown(f"‚ÑπÔ∏è {line.split('[INFO]')[1].strip()}")
                elif '[WARNING]' in line:
                    st.warning(line.split('[WARNING]')[1].strip())
                elif '[ERROR]' in line:
                    st.error(line.split('[ERROR]')[1].strip())
                elif '[DEBUG]' in line:
                    st.text(f"üîç {line.split('[DEBUG]')[1].strip()}")
                elif '–ì—Ä—É–ø–ø–∞' in line:
                    st.info(line.strip())
                elif '‚úÖ' in line or 'üîÑ' in line:
                    st.success(line.strip())
        else:
            st.info("–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")


def extract_stage_logs(full_log_path: str, stage_name: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ª–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ –∏–∑ –æ–±—â–µ–≥–æ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤.

    Args:
        full_log_path: –ü—É—Ç—å –∫ –ø–æ–ª–Ω–æ–º—É —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
        stage_name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

    Returns:
        –õ–æ–≥–∏ —ç—Ç–∞–ø–∞
    """
    if not os.path.exists(full_log_path):
        return ""

    stage_logs = []
    capture = False

    with open(full_log_path, 'r', encoding='utf-8') as f:
        for line in f:
            # –ù–∞—á–∞–ª–æ —ç—Ç–∞–ø–∞
            if stage_name in line and '–ù–∞—á–∞–ª–æ' in line:
                capture = True

            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —ç—Ç–∞–ø–∞
            if capture:
                stage_logs.append(line.rstrip())

            # –ö–æ–Ω–µ—Ü —ç—Ç–∞–ø–∞
            if stage_name in line and '–∑–∞–≤–µ—Ä—à—ë–Ω' in line:
                capture = False
                break

    return '\n'.join(stage_logs)


def create_progress_summary(
    stage_name: str,
    total_articles: int,
    processed_articles: int = 0,
    current_action: str = ""
) -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —ç—Ç–∞–ø–∞.

    Args:
        stage_name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞
        total_articles: –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π
        processed_articles: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç–∞—Ç–µ–π
        current_action: –¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    """
    progress_value = processed_articles / total_articles if total_articles > 0 else 0

    with st.container():
        st.progress(progress_value, text=f"{stage_name}: {processed_articles}/{total_articles} —Å—Ç–∞—Ç–µ–π")

        if current_action:
            st.caption(f"üîÑ {current_action}")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ app.py:
"""
from legaltechkz.ui.thinking_display import create_thinking_expander, extract_stage_logs

# –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–∞–ø–∞:
if results.get("log_file"):
    stage_log_content = extract_stage_logs(results["log_file"], stage_name)
    create_thinking_expander(stage_name, stage_log_content)
"""
