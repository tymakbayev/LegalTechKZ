"""
LegalTechKZ Web Interface
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∞–≤–æ–≤–æ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –ù–ü–ê –†–ö

–ó–∞–ø—É—Å–∫:
    streamlit run app.py
"""

import streamlit as st
import sys
import os
from pathlib import Path
from typing import Optional, Dict, Any, List
import json
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
from dotenv import load_dotenv
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞ –≤ os.environ

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="LegalTechKZ - –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–æ–≤–æ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –ù–ü–ê –†–ö",
    page_icon="‚öñÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.2rem;
        color: #666;
        text-align: center;
        margin-bottom: 2rem;
    }
    .stage-header {
        background: linear-gradient(90deg, #1f77b4, #4a9eff);
        color: white;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
    .success-box {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    .warning-box {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    .error-box {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    .metric-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 0.5rem 0;
    }
    .stProgress > div > div > div > div {
        background: linear-gradient(90deg, #1f77b4, #4a9eff);
    }
</style>
""", unsafe_allow_html=True)


def check_api_keys() -> Dict[str, bool]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–µ–π."""
    return {
        "openai": bool(os.getenv("OPENAI_API_KEY")),
        "anthropic": bool(os.getenv("ANTHROPIC_API_KEY")),
        "google": bool(os.getenv("GOOGLE_API_KEY"))
    }


def render_header():
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    st.markdown('<div class="main-header">‚öñÔ∏è LegalTechKZ</div>', unsafe_allow_html=True)
    st.markdown(
        '<div class="sub-header">AI-powered —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–∞–≤–æ–≤–æ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –ù–ü–ê –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω</div>',
        unsafe_allow_html=True
    )
    st.markdown("---")


def render_sidebar():
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏."""
    with st.sidebar:
        st.image("https://img.shields.io/badge/Version-1.0-blue.svg", use_container_width=False)

        st.markdown("### üîë –°—Ç–∞—Ç—É—Å API –∫–ª—é—á–µ–π")
        api_status = check_api_keys()

        col1, col2 = st.columns([3, 1])
        with col1:
            st.write("OpenAI GPT-4.1")
        with col2:
            st.write("‚úÖ" if api_status["openai"] else "‚ùå")

        col1, col2 = st.columns([3, 1])
        with col1:
            st.write("Anthropic Claude")
        with col2:
            st.write("‚úÖ" if api_status["anthropic"] else "‚ùå")

        col1, col2 = st.columns([3, 1])
        with col1:
            st.write("Google Gemini")
        with col2:
            st.write("‚úÖ" if api_status["google"] else "‚ùå")

        if not any(api_status.values()):
            st.warning("‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã API –∫–ª—é—á–∏! –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é.")
            with st.expander("üìñ –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?"):
                st.code("""
export OPENAI_API_KEY="sk-..."
export ANTHROPIC_API_KEY="sk-ant-..."
export GOOGLE_API_KEY="AI..."
                """, language="bash")

        st.markdown("---")

        st.markdown("### üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
        st.markdown("""
        - [–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è](docs/USER_GUIDE.md)
        - [API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è](docs/API_KEYS_SETUP.md)
        - [–°–∏—Å—Ç–µ–º–∞ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã](docs/LEGAL_EXPERTISE_SYSTEM.md)
        - [Multi-Model —Å–∏—Å—Ç–µ–º–∞](docs/MULTI_MODEL_SYSTEM.md)
        """)

        st.markdown("---")

        st.markdown("### ‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ")
        st.markdown("""
        **LegalTechKZ** —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º —Ä–µ—Å—É—Ä—Å–æ–º [adilet.zan.kz](https://adilet.zan.kz)

        –í–µ—Ä—Å–∏—è: 1.0
        –õ–∏—Ü–µ–Ω–∑–∏—è: MIT
        """)

        st.markdown("---")
        st.markdown("Made with ‚ù§Ô∏è in Kazakhstan üá∞üáø")


def render_expertise_stages():
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ 6 —ç—Ç–∞–ø–∞—Ö —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã."""
    st.markdown("### üìã –≠—Ç–∞–ø—ã –ø—Ä–∞–≤–æ–≤–æ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã")

    stages = [
        {
            "number": 1,
            "name": "–§–∏–ª—å—Ç—Ä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏",
            "icon": "üîç",
            "description": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –æ—Ü–µ–Ω–∫–∞ –ø–æ –º–∞—Ç—Ä–∏—Ü–µ ILNR"
        },
        {
            "number": 2,
            "name": "–§–∏–ª—å—Ç—Ä –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ—Å—Ç–∏",
            "icon": "üìú",
            "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –†–ö, NLI –∞–Ω–∞–ª–∏–∑"
        },
        {
            "number": 3,
            "name": "–§–∏–ª—å—Ç—Ä –°–∏—Å—Ç–µ–º–Ω–æ–π –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
            "icon": "üîó",
            "description": "–í—ã—è–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–∏–∑–∏–π —Å –¥–µ–π—Å—Ç–≤—É—é—â–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º"
        },
        {
            "number": 4,
            "name": "–Æ—Ä–∏–¥–∏–∫–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞",
            "icon": "‚öôÔ∏è",
            "description": "–û—Ü–µ–Ω–∫–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∏"
        },
        {
            "number": 5,
            "name": "–ê–Ω—Ç–∏–∫–æ—Ä—Ä—É–ø—Ü–∏–æ–Ω–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞",
            "icon": "üõ°Ô∏è",
            "description": "–í—ã—è–≤–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä—É–ø—Ü–∏–æ–≥–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"
        },
        {
            "number": 6,
            "name": "–ì–µ–Ω–¥–µ—Ä–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞",
            "icon": "‚öñÔ∏è",
            "description": "–û—Ü–µ–Ω–∫–∞ –≥–µ–Ω–¥–µ—Ä–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"
        }
    ]

    cols = st.columns(3)
    for i, stage in enumerate(stages):
        with cols[i % 3]:
            with st.container():
                st.markdown(f"""
                <div class="metric-card">
                    <h4>{stage['icon']} –≠—Ç–∞–ø {stage['number']}</h4>
                    <p><strong>{stage['name']}</strong></p>
                    <p style="font-size: 0.9rem; color: #666;">{stage['description']}</p>
                </div>
                """, unsafe_allow_html=True)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    render_header()
    render_sidebar()

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    tab1, tab2, tab3, tab4 = st.tabs([
        "üè† –ì–ª–∞–≤–Ω–∞—è",
        "üìù –ê–Ω–∞–ª–∏–∑ –ù–ü–ê",
        "üîç –ü–æ–∏—Å–∫ –Ω–∞ Adilet",
        "üìä –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤"
    ])

    with tab1:
        render_home_page()

    with tab2:
        render_analysis_page()

    with tab3:
        render_search_page()

    with tab4:
        render_history_page()


def render_home_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞."""
    st.markdown("## –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LegalTechKZ!")

    st.markdown("""
    –°–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–∞–≤–æ–≤–æ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤—ã—Ö –∞–∫—Ç–æ–≤
    –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.
    """)

    # –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric(
            label="–≠—Ç–∞–ø–æ–≤ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã",
            value="6",
            delta="–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
        )

    with col2:
        st.metric(
            label="LLM –ü—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤",
            value="3",
            delta="Multi-Model —Å–∏—Å—Ç–µ–º–∞"
        )

    with col3:
        st.metric(
            label="–≠–∫–æ–Ω–æ–º–∏—è –∑–∞—Ç—Ä–∞—Ç",
            value="85-90%",
            delta="–ß–µ—Ä–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
        )

    with col4:
        st.metric(
            label="–¢–æ—á–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞",
            value="+18%",
            delta="Extended Thinking"
        )

    st.markdown("---")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ 6 —ç—Ç–∞–ø–∞—Ö
    render_expertise_stages()

    st.markdown("---")

    # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    st.markdown("### ‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("""
        **üîç –ü–æ–∏—Å–∫ –ù–ü–ê**
        - –ü–æ–∏—Å–∫ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º adilet.zan.kz
        - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∏ —Å—Ç–∞—Ç—É—Å—É
        - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

        **üìä –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**
        - –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–∞–≤–æ–≤–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞
        - 6 —ç—Ç–∞–ø–æ–≤ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        - –ì–∞—Ä–∞–Ω—Ç–∏—è –ø–æ–ª–Ω–æ—Ç—ã (–∫–∞–∂–¥–∞—è —Å—Ç–∞—Ç—å—è)

        **‚öñÔ∏è –í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º**
        - –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏
        - –ö–æ–ª–ª–∏–∑–∏–∏ —Å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º
        - –ö–æ—Ä—Ä—É–ø—Ü–∏–æ–≥–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        """)

    with col2:
        st.markdown("""
        **ü§ñ Multi-Model –ò–ò**
        - Gemini: –±–æ–ª—å—à–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (1M+ —Ç–æ–∫–µ–Ω–æ–≤)
        - Claude: –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è
        - GPT: –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è

        **üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤**
        - PDF –æ—Ç—á–µ—Ç—ã
        - JSON –¥–∞–Ω–Ω—ã–µ
        - DOCX –¥–æ–∫—É–º–µ–Ω—Ç—ã

        **üìà –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏**
        - Prompt Caching (90% —ç–∫–æ–Ω–æ–º–∏—è)
        - Extended Thinking (+18% —Ç–æ—á–Ω–æ—Å—Ç—å)
        - Structured Outputs (100% —Ñ–æ—Ä–º–∞—Ç)
        """)

    st.markdown("---")

    # –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
    st.markdown("### üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")

    st.info("""
    **–ù–∞—á–Ω–∏—Ç–µ —Å –≤–∫–ª–∞–¥–∫–∏ "üìù –ê–Ω–∞–ª–∏–∑ –ù–ü–ê":**

    1. –í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ù–ü–ê –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª
    2. –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø—ã —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
    3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
    4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç

    –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É **"üîç –ü–æ–∏—Å–∫ –Ω–∞ Adilet"** –¥–ª—è –ø–æ–∏—Å–∫–∞ –ù–ü–ê –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ.
    """)


def render_analysis_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞ –ù–ü–ê."""
    st.markdown("## üìù –ê–Ω–∞–ª–∏–∑ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤–æ–≥–æ –∞–∫—Ç–∞")

    st.info("–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–∞–≤–æ–≤—É—é —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É –ù–ü–ê")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    api_status = check_api_keys()
    if not any(api_status.values()):
        st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω API –∫–ª—é—á –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã!")
        st.stop()

    # –í–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    st.markdown("### 1Ô∏è‚É£ –í–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

    input_method = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:",
        ["–í—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "–ü–æ–∏—Å–∫ –Ω–∞ Adilet"],
        horizontal=True
    )

    document_text = ""
    document_metadata = {}

    if input_method == "–í—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç":
        document_text = st.text_area(
            "–¢–µ–∫—Å—Ç –ù–ü–ê:",
            height=300,
            placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤–æ–≥–æ –∞–∫—Ç–∞...",
            help="–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        )

        col1, col2 = st.columns(2)
        with col1:
            doc_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ó–∞–∫–æ–Ω –æ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏")
        with col2:
            doc_number = st.text_input("–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 284-VI –ó–†–ö")

        if doc_name:
            document_metadata["title"] = doc_name
        if doc_number:
            document_metadata["number"] = doc_number

    elif input_method == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º –ù–ü–ê:",
            type=["txt", "pdf", "docx"],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: TXT, PDF, DOCX"
        )

        if uploaded_file is not None:
            # TODO: Implement file parsing
            st.info("üìÑ –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
            document_text = uploaded_file.read().decode("utf-8") if uploaded_file.type == "text/plain" else ""

    else:  # –ü–æ–∏—Å–∫ –Ω–∞ Adilet
        st.markdown("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É **'üîç –ü–æ–∏—Å–∫ –Ω–∞ Adilet'** –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
    st.markdown("---")
    st.markdown("### 2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("**–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø—ã —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã:**")

        stage_1 = st.checkbox("üîç –§–∏–ª—å—Ç—Ä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏", value=True)
        stage_2 = st.checkbox("üìú –§–∏–ª—å—Ç—Ä –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ—Å—Ç–∏", value=True)
        stage_3 = st.checkbox("üîó –§–∏–ª—å—Ç—Ä –°–∏—Å—Ç–µ–º–Ω–æ–π –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", value=True)
        stage_4 = st.checkbox("‚öôÔ∏è –Æ—Ä–∏–¥–∏–∫–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞", value=True)
        stage_5 = st.checkbox("üõ°Ô∏è –ê–Ω—Ç–∏–∫–æ—Ä—Ä—É–ø—Ü–∏–æ–Ω–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞", value=True)
        stage_6 = st.checkbox("‚öñÔ∏è –ì–µ–Ω–¥–µ—Ä–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞", value=True)

    with col2:
        st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏:**")

        use_extended_thinking = st.checkbox(
            "Extended Thinking",
            value=True,
            help="–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ (+18% —Ç–æ—á–Ω–æ—Å—Ç—å)"
        )

        use_prompt_caching = st.checkbox(
            "Prompt Caching",
            value=True,
            help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ (—ç–∫–æ–Ω–æ–º–∏—è 90%)"
        )

        use_grounding = st.checkbox(
            "Grounding",
            value=False,
            help="–ü—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ Google Search"
        )

        structured_output = st.checkbox(
            "Structured Output",
            value=True,
            help="–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞"
        )

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
    st.markdown("---")
    st.markdown("### 3Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞")

    if st.button("üöÄ –ù–∞—á–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É", type="primary", use_container_width=True):
        if not document_text:
            st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞!")
        else:
            run_expertise_analysis(
                document_text=document_text,
                document_metadata=document_metadata,
                stages={
                    "relevance": stage_1,
                    "constitutionality": stage_2,
                    "system_integration": stage_3,
                    "legal_technical": stage_4,
                    "anti_corruption": stage_5,
                    "gender": stage_6
                },
                options={
                    "extended_thinking": use_extended_thinking,
                    "prompt_caching": use_prompt_caching,
                    "grounding": use_grounding,
                    "structured_output": structured_output
                }
            )


def run_expertise_analysis(
    document_text: str,
    document_metadata: Dict[str, str],
    stages: Dict[str, bool],
    options: Dict[str, bool]
):
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º WebExpertiseController."""

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if 'analysis_results' not in st.session_state:
        st.session_state.analysis_results = {}

    st.markdown("---")
    st.markdown("## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã")

    # Progress bar
    progress_bar = st.progress(0)
    status_text = st.empty()

    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_container = st.container()

    try:
        # –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        from legaltechkz.ui.web_integration import get_controller

        controller = get_controller()

        # Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        def update_progress(progress_info):
            """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ."""
            progress_value = progress_info.current_stage / progress_info.total_stages
            progress_bar.progress(progress_value)
            status_text.text(f"‚è≥ {progress_info.stage_name} ({progress_info.current_stage}/{progress_info.total_stages})...")

        # –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
        status_text.text("üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã...")

        results = controller.run_expertise_pipeline(
            document_text=document_text,
            document_metadata=document_metadata,
            stages=stages,
            options=options,
            progress_callback=update_progress
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        if not results.get("success"):
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {results.get('error')}")

            if results.get("traceback"):
                with st.expander("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏"):
                    st.code(results["traceback"])
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ session state
        st.session_state.analysis_results = results

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
        parsing = results["parsing"]
        with results_container:
            st.success(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: {parsing['fragments_count']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ({parsing['articles_count']} —Å—Ç–∞—Ç–µ–π)")

            with st.expander("üìã –û–≥–ª–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"):
                st.text(parsing["table_of_contents"])

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç—Ç–∞–ø–æ–≤
        stage_names_icons = {
            "relevance": "üîç",
            "constitutionality": "üìú",
            "system_integration": "üîó",
            "legal_technical": "‚öôÔ∏è",
            "anti_corruption": "üõ°Ô∏è",
            "gender": "‚öñÔ∏è"
        }

        for stage_result in results["stage_results"]:
            stage_key = stage_result["detailed_results"].get("stage_key", "")
            icon = stage_names_icons.get(stage_key, "üìä")

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
            if stage_result["status"] == "success":
                status_badge = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ"
                expander_class = "success-box"
            elif stage_result["status"] == "warning":
                status_badge = "‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏"
                expander_class = "warning-box"
            else:
                status_badge = "‚ùå –û—à–∏–±–∫–∞"
                expander_class = "error-box"

            with results_container:
                with st.expander(f"{icon} {stage_result['stage_name']} - {status_badge}", expanded=False):
                    col1, col2 = st.columns(2)

                    with col1:
                        st.markdown(f"""
                        **–°—Ç–∞—Ç—É—Å:** {status_badge}

                        **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç–∞—Ç–µ–π:** {stage_result['articles_analyzed']}

                        **–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º:** {stage_result['issues_found']}

                        **–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {stage_result['processing_time']:.2f} —Å–µ–∫
                        """)

                    with col2:
                        if stage_result["recommendations"]:
                            st.markdown("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
                            for rec in stage_result["recommendations"]:
                                st.markdown(f"- {rec}")
                        else:
                            st.markdown("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** –ù–µ—Ç –∑–∞–º–µ—á–∞–Ω–∏–π")

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        progress_bar.progress(1.0)
        status_text.text("‚úÖ –≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

        overall = results["overall"]
        completeness = results["completeness"]

        with results_container:
            st.markdown("---")
            st.markdown("## üìã –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ")

            col1, col2, col3, col4 = st.columns(4)

            with col1:
                st.metric(
                    "–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞",
                    f"{overall['quality_score']}/100",
                    delta="–û—Ç–ª–∏—á–Ω–æ" if overall['quality_score'] >= 90 else "–•–æ—Ä–æ—à–æ" if overall['quality_score'] >= 70 else "–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
                )

            with col2:
                st.metric(
                    "–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º",
                    overall['total_issues'],
                    delta="–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º" if overall['total_issues'] == 0 else f"{overall['total_issues']} –ø—Ä–æ–±–ª–µ–º"
                )

            with col3:
                st.metric(
                    "–ü–æ–ª–Ω–æ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞",
                    f"{completeness['completion_rate']:.0f}%",
                    delta=f"{completeness['analyzed_articles']}/{completeness['total_articles']} —Å—Ç–∞—Ç–µ–π"
                )

            with col4:
                st.metric(
                    "–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                    f"{overall['processing_time']:.1f} —Å–µ–∫",
                    delta=f"{results['stages_completed']} —ç—Ç–∞–ø–æ–≤"
                )

            # –í–µ—Ä–¥–∏–∫—Ç
            if overall["verdict_status"] == "success":
                st.success(f"‚úÖ {overall['verdict']}")
            elif overall["verdict_status"] == "warning":
                st.warning(f"‚ö†Ô∏è {overall['verdict']}")
            else:
                st.error(f"‚ùå {overall['verdict']}")

            # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
            st.markdown("---")
            st.markdown("### üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

            col1, col2, col3 = st.columns(3)

            with col1:
                # –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
                text_report = controller.export_results_text(results)
                st.download_button(
                    label="üìÑ –°–∫–∞—á–∞—Ç—å TXT",
                    data=text_report,
                    file_name=f"expertise_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                    mime="text/plain",
                    use_container_width=True
                )

            with col2:
                # –≠–∫—Å–ø–æ—Ä—Ç JSON
                json_report = controller.export_results_json(results)
                st.download_button(
                    label="üìä –°–∫–∞—á–∞—Ç—å JSON",
                    data=json_report,
                    file_name=f"expertise_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                    mime="application/json",
                    use_container_width=True
                )

            with col3:
                if st.button("üìù –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF", use_container_width=True):
                    st.info("üí° –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")

    except ImportError as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
        st.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ —Å–∏—Å—Ç–µ–º—ã —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        with st.expander("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"):
            import traceback
            st.code(traceback.format_exc())
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        with st.expander("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏"):
            import traceback
            st.code(traceback.format_exc())


def render_search_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ Adilet."""
    st.markdown("## üîç –ü–æ–∏—Å–∫ –ù–ü–ê –Ω–∞ adilet.zan.kz")

    st.info("–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Ä–µ—Å—É—Ä—Å–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–ö")

    # –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞
    col1, col2 = st.columns([3, 1])

    with col1:
        search_query = st.text_input(
            "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å, –ó–∞–∫–æ–Ω –æ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏...",
            help="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–æ–º–µ—Ä –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
        )

    with col2:
        st.write("")  # Spacer
        st.write("")  # Spacer
        search_button = st.button("üîç –ü–æ–∏—Å–∫", type="primary", use_container_width=True)

    # –§–∏–ª—å—Ç—Ä—ã
    with st.expander("‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞"):
        col1, col2, col3 = st.columns(3)

        with col1:
            doc_type = st.selectbox(
                "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:",
                ["–í—Å–µ", "–ó–∞–∫–æ–Ω", "–ö–æ–¥–µ–∫—Å", "–£–∫–∞–∑", "–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "–ü—Ä–∏–∫–∞–∑"]
            )

        with col2:
            status = st.selectbox(
                "–°—Ç–∞—Ç—É—Å:",
                ["–í—Å–µ", "–î–µ–π—Å—Ç–≤—É—é—â–∏–π", "–£—Ç—Ä–∞—Ç–∏–≤—à–∏–π —Å–∏–ª—É"]
            )

        with col3:
            year = st.text_input(
                "–ì–æ–¥ –ø—Ä–∏–Ω—è—Ç–∏—è:",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 2024"
            )

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    if search_button and search_query:
        with st.spinner("–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..."):
            try:
                from legaltechkz.tools.adilet_search import AdiletSearchTool

                search_tool = AdiletSearchTool()

                # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤
                doc_type_map = {
                    "–í—Å–µ": "all",
                    "–ó–∞–∫–æ–Ω": "law",
                    "–ö–æ–¥–µ–∫—Å": "code",
                    "–£–∫–∞–∑": "decree",
                    "–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ": "resolution",
                    "–ü—Ä–∏–∫–∞–∑": "order"
                }

                status_map = {
                    "–í—Å–µ": "all",
                    "–î–µ–π—Å—Ç–≤—É—é—â–∏–π": "active",
                    "–£—Ç—Ä–∞—Ç–∏–≤—à–∏–π —Å–∏–ª—É": "invalid"
                }

                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
                results = search_tool.execute(
                    query=search_query,
                    doc_type=doc_type_map.get(doc_type, "all"),
                    status=status_map.get(status, "all"),
                    year=year if year else None
                )

                if results["status"] == "success" and results["result_count"] > 0:
                    st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {results['result_count']}")

                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    for i, doc in enumerate(results["results"], 1):
                        with st.container():
                            col1, col2 = st.columns([4, 1])

                            with col1:
                                st.markdown(f"**{i}. {doc.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**")
                                st.markdown(f"üìÖ {doc.get('date', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')} ‚Ä¢ üìã {doc.get('number', '–ù–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω')}")
                                st.markdown(f"üîó [{doc.get('url', '')}]({doc.get('url', '')})")

                                status_badge = "üü¢ –î–µ–π—Å—Ç–≤—É–µ—Ç" if doc.get('status') == "–î–µ–π—Å—Ç–≤—É–µ—Ç" else "üî¥ –£—Ç—Ä–∞—Ç–∏–ª —Å–∏–ª—É"
                                st.markdown(status_badge)

                            with col2:
                                if st.button(f"üìù –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", key=f"analyze_{i}"):
                                    st.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
                                    # TODO: Fetch document and switch to analysis tab

                            st.markdown("---")
                else:
                    st.warning("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")

            except ImportError:
                st.error("‚ùå –ú–æ–¥—É–ª—å –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")


def render_history_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤."""
    st.markdown("## üìä –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤")

    st.info("–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–∏–∑ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å")

    # TODO: Implement history tracking
    st.markdown("""
    ### –§—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:

    - üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–æ–≤
    - üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–º —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞–º
    - üîÑ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤
    - üì• –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    - üóÇÔ∏è –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–∞–º –∏ —Ç–∏–ø–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """)

    # –î–µ–º–æ –¥–∞–Ω–Ω—ã—Ö
    st.markdown("---")
    st.markdown("### –ü—Ä–∏–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤")

    demo_data = [
        {
            "date": "2024-01-15 14:30",
            "document": "–ó–∞–∫–æ–Ω –æ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏ –†–ö",
            "stages": 6,
            "score": 95,
            "status": "‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–Ω—è—Ç–∏—é"
        },
        {
            "date": "2024-01-14 10:15",
            "document": "–ü—Ä–æ–µ–∫—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ì–ö –†–ö",
            "stages": 6,
            "score": 78,
            "status": "‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
        },
        {
            "date": "2024-01-13 16:45",
            "document": "–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ –≥–æ—Å–∑–∞–∫—É–ø–∫–∞—Ö",
            "stages": 4,
            "score": 88,
            "status": "‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–Ω—è—Ç–∏—é"
        }
    ]

    for item in demo_data:
        with st.container():
            col1, col2, col3, col4, col5 = st.columns([2, 3, 1, 1, 2])

            with col1:
                st.write(f"**{item['date']}**")

            with col2:
                st.write(item['document'])

            with col3:
                st.write(f"{item['stages']} —ç—Ç–∞–ø–æ–≤")

            with col4:
                st.write(f"**{item['score']}**/100")

            with col5:
                st.write(item['status'])

            st.markdown("---")


if __name__ == "__main__":
    main()
