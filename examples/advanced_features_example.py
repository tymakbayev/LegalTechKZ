"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤.

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
1. Prompt Caching (Claude) - —ç–∫–æ–Ω–æ–º–∏—è 90%
2. Extended Thinking (Claude) - —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
3. Structured Outputs (OpenAI) - –≥–∞—Ä–∞–Ω—Ç–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
4. Grounding (Gemini) - –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
"""

import os
import sys
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))


def example_prompt_caching():
    """
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Prompt Caching –≤ Claude.
    –≠–∫–æ–Ω–æ–º–∏—è 90% –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è system prompts.
    """
    print("=" * 80)
    print("–ü–†–ò–ú–ï–† 1: PROMPT CACHING (CLAUDE)")
    print("=" * 80)

    from legaltechkz.models.anthropic_model import AnthropicModel

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    if not os.getenv("ANTHROPIC_API_KEY"):
        print("\n‚ö†Ô∏è  ANTHROPIC_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("   export ANTHROPIC_API_KEY='sk-ant-...'")
        return

    # –°–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å
    model = AnthropicModel(
        model_name="claude-sonnet-4-5-20250514",
        temperature=0.1
    )

    # System prompt (–±—É–¥–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω)
    system_prompt = """
    –¢—ã ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–æ–≤–æ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
    –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–æ–≤—ã—Ö –∞–∫—Ç–æ–≤ (–ù–ü–ê) –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω.

    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∞–Ω—Ç–∏–∫–æ—Ä—Ä—É–ø—Ü–∏–æ–Ω–Ω—É—é —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É —Å–æ–≥–ª–∞—Å–Ω–æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏
    –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —é—Å—Ç–∏—Ü–∏–∏ –†–ö.

    –ê–õ–ì–û–†–ò–¢–ú –ê–ù–ê–õ–ò–ó–ê:
    1. –í—ã—è–≤–∏—Ç—å —é—Ä–∏–¥–∏–∫–æ-–ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫—É—é –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å
    2. –û—Ü–µ–Ω–∏—Ç—å —à–∏—Ä–æ—Ç—É –¥–∏—Å–∫—Ä–µ—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ–º–æ—á–∏–π
    3. –ù–∞–π—Ç–∏ –ø—Ä–∞–≤–æ–≤—ã–µ –ø—Ä–æ–±–µ–ª—ã
    4. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –±–∞—Ä—å–µ—Ä—ã
    5. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ä—É–ø—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫–∞

    –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.
    """

    # –ü—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    articles = [
        "–°—Ç–∞—Ç—å—è 5. –£–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã–π –æ—Ä–≥–∞–Ω –≤–ø—Ä–∞–≤–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö.",
        "–°—Ç–∞—Ç—å—è 6. –°—Ä–æ–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø–µ—Ä–∏–æ–¥.",
        "–°—Ç–∞—Ç—å—è 7. –î–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é."
    ]

    print("\nüìä –ê–Ω–∞–ª–∏–∑ 3 —Å—Ç–∞—Ç–µ–π —Å prompt caching...\n")

    for i, article in enumerate(articles, 1):
        print(f"–°—Ç–∞—Ç—å—è {i}:")

        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ —Å–æ–∑–¥–∞—Å—Ç –∫–µ—à, —Å–ª–µ–¥—É—é—â–∏–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –µ–≥–æ
        try:
            response = model.generate(
                prompt=f"–ü—Ä–æ–≤–µ–¥–∏ –∞–Ω—Ç–∏–∫–æ—Ä—Ä—É–ø—Ü–∏–æ–Ω–Ω—É—é —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É:\n\n{article}",
                system_message=system_prompt,
                use_caching=True,  # –í–∫–ª—é—á–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
                max_tokens=1000
            )

            print(f"  –ê–Ω–∞–ª–∏–∑: {response[:200]}...\n")

            if i == 1:
                print("  üíæ System prompt –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω (–ø–æ–ª–Ω–∞—è —Ü–µ–Ω–∞)")
            else:
                print(f"  ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–µ—à system prompt (—ç–∫–æ–Ω–æ–º–∏—è 90%)")

        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}\n")

    print("\nüí∞ –≠–ö–û–ù–û–ú–ò–Ø:")
    print("   –°—Ç–∞—Ç—å—è 1: –ü–æ–ª–Ω–∞—è —Ü–µ–Ω–∞ –Ω–∞ system prompt (~2000 —Ç–æ–∫–µ–Ω–æ–≤ √ó $3/M = $0.006)")
    print("   –°—Ç–∞—Ç—å—è 2: –ö–µ—à system prompt (~2000 —Ç–æ–∫–µ–Ω–æ–≤ √ó $0.30/M = $0.0006)")
    print("   –°—Ç–∞—Ç—å—è 3: –ö–µ—à system prompt (~2000 —Ç–æ–∫–µ–Ω–æ–≤ √ó $0.30/M = $0.0006)")
    print("   –ò–¢–û–ì–û: –≠–∫–æ–Ω–æ–º–∏—è $0.0048 (80%) –Ω–∞ 3 —Å—Ç–∞—Ç—å—è—Ö")
    print("   –ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ 100 —Å—Ç–∞—Ç–µ–π: —ç–∫–æ–Ω–æ–º–∏—è ~$0.50-0.60\n")


def example_extended_thinking():
    """
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Extended Thinking –≤ Claude.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤—ã–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.
    """
    print("=" * 80)
    print("–ü–†–ò–ú–ï–† 2: EXTENDED THINKING (CLAUDE)")
    print("=" * 80)

    from legaltechkz.models.anthropic_model import AnthropicModel

    if not os.getenv("ANTHROPIC_API_KEY"):
        print("\n‚ö†Ô∏è  ANTHROPIC_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    model = AnthropicModel(
        model_name="claude-sonnet-4-5-20250514",
        temperature=0.1
    )

    # –°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ —Ç—Ä–µ–±—É—é—â–∞—è —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
    complex_article = """
    –°—Ç–∞—Ç—å—è 15. –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω–æ–≥–æ –æ—Ä–≥–∞–Ω–∞

    1. –£–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã–π –æ—Ä–≥–∞–Ω –≤ —Å—Ñ–µ—Ä–µ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏:

    1) —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –æ–∫–∞–∑–∞–Ω–∏—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥
    –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ;

    2) –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –∑–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ó–∞–∫–æ–Ω–∞;

    3) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–≤–æ–µ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏.

    2. –£–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã–π –æ—Ä–≥–∞–Ω –≤–ø—Ä–∞–≤–µ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –ø–æ–ª–Ω–æ–º–æ—á–∏—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö.
    """

    system_prompt = """
    –¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ–º—É –ø—Ä–∞–≤—É –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω.
    –ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ—Ä–º—ã –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –†–ö.
    """

    print("\nü§î –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å Extended Thinking...\n")

    try:
        result = model.generate_with_thinking(
            prompt=f"""
            –ü—Ä–æ–≤–µ–¥–∏ –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ-–ø—Ä–∞–≤–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞—Ç—å–∏:

            {complex_article}

            –û–ø—Ä–µ–¥–µ–ª–∏:
            1. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ—Ä–º–∞ –ø—Ä–∏–Ω—Ü–∏–ø—É –ø—Ä–∞–≤–æ–≤–æ–π –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏ (—Å—Ç. 1 –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏)?
            2. –ù–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –ª–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é –≤–ª–∞—Å—Ç–µ–π (—Å—Ç. 3 –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏)?
            3. –°–æ–±–ª—é–¥–µ–Ω –ª–∏ –ø—Ä–∏–Ω—Ü–∏–ø –∑–∞–∫–æ–Ω–Ω–æ—Å—Ç–∏ (—Å—Ç. 4 –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏)?

            –ò—Å–ø–æ–ª—å–∑—É–π NLI –∞–Ω–∞–ª–∏–∑ (Contradiction/Entailment/Neutral).
            """,
            system_message=system_prompt,
            thinking_budget=5000,  # –ë—é–¥–∂–µ—Ç –Ω–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è
            use_caching=True
        )

        print("üß† –†–ê–°–°–£–ñ–î–ï–ù–ò–Ø –ú–û–î–ï–õ–ò:")
        print("-" * 80)
        print(result['thinking'][:500] + "...\n")

        print("\nüìÑ –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó:")
        print("-" * 80)
        print(result['response'][:500] + "...\n")

        print("\n‚ú® –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê EXTENDED THINKING:")
        print("   ‚úÖ –í–∏–¥–Ω—ã –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è")
        print("   ‚úÖ –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏ –¥–ª—è –ø—Ä–∞–≤–æ–≤—ã—Ö –∑–∞–∫–ª—é—á–µ–Ω–∏–π")
        print("   ‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ +18% (–ø–æ –±–µ–Ω—á–º–∞—Ä–∫–∞–º)")
        print("   ‚úÖ –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –≤ –æ—Ç—á–µ—Ç –∫–∞–∫ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ\n")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}\n")


def example_structured_outputs():
    """
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Structured Outputs –≤ OpenAI.
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç 100% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ JSON —Å—Ö–µ–º–µ.
    """
    print("=" * 80)
    print("–ü–†–ò–ú–ï–† 3: STRUCTURED OUTPUTS (OPENAI)")
    print("=" * 80)

    from legaltechkz.models.openai_model import OpenAIModel
    from pydantic import BaseModel, Field
    from typing import List
    from enum import Enum

    if not os.getenv("OPENAI_API_KEY"):
        print("\n‚ö†Ô∏è  OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ö–µ–º—É –æ—Ç–≤–µ—Ç–∞
    class RiskLevel(str, Enum):
        HIGH = "–≤—ã—Å–æ–∫–∏–π"
        MEDIUM = "—Å—Ä–µ–¥–Ω–∏–π"
        LOW = "–Ω–∏–∑–∫–∏–π"
        NONE = "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

    class CorruptionFactor(BaseModel):
        factor_type: str = Field(description="–¢–∏–ø –∫–æ—Ä—Ä—É–ø—Ü–∏–æ–≥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞")
        description: str = Field(description="–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∞")
        article_reference: str = Field(description="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—É–Ω–∫—Ç —Å—Ç–∞—Ç—å–∏")

    class AntiCorruptionAnalysis(BaseModel):
        article_number: str = Field(description="–ù–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏")
        risk_level: RiskLevel = Field(description="–£—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ä—É–ø—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫–∞")
        factors_found: List[CorruptionFactor] = Field(description="–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã")
        recommendations: List[str] = Field(description="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é")
        confidence_score: float = Field(ge=0, le=1, description="–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")

    model = OpenAIModel(
        model_name="gpt-4o-2024-08-06",  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Structured Outputs
        temperature=0.1
    )

    article = """
    –°—Ç–∞—Ç—å—è 12. –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π

    1. –î–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∑–∞—è–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ
    –≤ —Ç–µ—á–µ–Ω–∏–µ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Å—Ä–æ–∫–∞.

    2. –í —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å—Ä–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–ª–µ–Ω –ø–æ —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é
    –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞.

    3. –û—Ç–∫–∞–∑ –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.
    """

    print("\nüìã –ê–Ω–∞–ª–∏–∑ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π JSON...\n")

    try:
        result = model.generate_structured(
            prompt=f"""
            –ü—Ä–æ–≤–µ–¥–∏ –∞–Ω—Ç–∏–∫–æ—Ä—Ä—É–ø—Ü–∏–æ–Ω–Ω—É—é —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞—Ç—å–∏:

            {article}

            –ù–∞–π–¥–∏ –≤—Å–µ –∫–æ—Ä—Ä—É–ø—Ü–∏–æ–≥–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:
            - –Æ—Ä–∏–¥–∏–∫–æ-–ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å
            - –®–∏—Ä–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ–º–æ—á–∏–π
            - –ü—Ä–∞–≤–æ–≤—ã–µ –ø—Ä–æ–±–µ–ª—ã
            - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –±–∞—Ä—å–µ—Ä—ã

            –û—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
            """,
            response_model=AntiCorruptionAnalysis,
            system_message="–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω—Ç–∏–∫–æ—Ä—Ä—É–ø—Ü–∏–æ–Ω–Ω–æ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–µ –ù–ü–ê –†–ö."
        )

        print("‚úÖ –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("-" * 80)
        print(f"–°—Ç–∞—Ç—å—è: {result.article_number}")
        print(f"–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {result.risk_level.value}")
        print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence_score:.2%}")

        print(f"\n–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤: {len(result.factors_found)}")
        for i, factor in enumerate(result.factors_found, 1):
            print(f"\n{i}. {factor.factor_type}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {factor.description}")
            print(f"   –°—Å—ã–ª–∫–∞: {factor.article_reference}")

        print(f"\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for i, rec in enumerate(result.recommendations, 1):
            print(f"{i}. {rec}")

        print("\n\n‚ú® –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê STRUCTURED OUTPUTS:")
        print("   ‚úÖ 100% –≥–∞—Ä–∞–Ω—Ç–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON")
        print("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pydantic")
        print("   ‚úÖ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        print("   ‚úÖ Type safety –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        print("   ‚úÖ –õ–µ–≥–∫–æ –ø–∞—Ä—Å–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ë–î\n")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}\n")
        import traceback
        traceback.print_exc()


def example_grounding():
    """
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Grounding –≤ Gemini.
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google Search.
    """
    print("=" * 80)
    print("–ü–†–ò–ú–ï–† 4: GROUNDING WITH GOOGLE SEARCH (GEMINI)")
    print("=" * 80)

    from legaltechkz.models.gemini_model import GeminiModel

    if not os.getenv("GOOGLE_API_KEY"):
        print("\n‚ö†Ô∏è  GOOGLE_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    model = GeminiModel(
        model_name="gemini-2.5-flash",
        temperature=0.1
    )

    # –ó–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É—é—â–∏–π –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    query = """
    –ü—Ä–æ–µ–∫—Ç –ù–ü–ê —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ "–ó–∞–∫–æ–Ω –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω –æ—Ç 27 –¥–µ–∫–∞–±—Ä—è 2019 –≥–æ–¥–∞
    ‚Ññ 284-VI –ó–†–ö ¬´–û –≤–Ω–µ—Å–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–µ
    –∞–∫—Ç—ã –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø—Ä–æ—Ç–∏–≤–æ–¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ä—Ä—É–ø—Ü–∏–∏¬ª".

    –ó–∞–¥–∞—á–∞:
    1. –ü—Ä–æ–≤–µ—Ä—å –∞–∫—Ç—É–∞–ª—å–Ω–∞ –ª–∏ —ç—Ç–∞ —Ä–µ–¥–∞–∫—Ü–∏—è –∑–∞–∫–æ–Ω–∞
    2. –ë—ã–ª–∏ –ª–∏ –≤–Ω–µ—Å–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ 2019 –≥–æ–¥–∞
    3. –ù–∞–π–¥–∏ –¥–µ–π—Å—Ç–≤—É—é—â—É—é —Ä–µ–¥–∞–∫—Ü–∏—é –Ω–∞ adilet.zan.kz
    4. –£–∫–∞–∂–∏ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    """

    print("\nüîç –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...\n")

    try:
        result = model.generate_with_grounding(
            prompt=query,
            dynamic_retrieval=True  # –ú–æ–¥–µ–ª—å —Å–∞–º–∞ —Ä–µ—à–∏—Ç –∫–æ–≥–¥–∞ –∏—Å–∫–∞—Ç—å
        )

        print("üìÑ –û–¢–í–ï–¢ –° –ê–ö–¢–£–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò:")
        print("-" * 80)
        print(result['response'])

        if result['grounding_metadata'].get('grounding_chunks'):
            print("\n\nüîó –ò–°–¢–û–ß–ù–ò–ö–ò:")
            print("-" * 80)
            for i, chunk in enumerate(result['grounding_metadata']['grounding_chunks'], 1):
                print(f"{i}. {chunk.get('web_title', 'N/A')}")
                print(f"   {chunk.get('web_uri', 'N/A')}\n")

        print("\n‚ú® –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê GROUNDING:")
        print("   ‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞")
        print("   ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (—Å—Å—ã–ª–∫–∏)")
        print("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–∞ adilet.zan.kz")
        print("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–¥–∞–∫—Ü–∏–π –∑–∞–∫–æ–Ω–æ–≤")
        print("   ‚úÖ –ù–µ —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –∑–∞–∫–æ–Ω–æ–≤\n")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}\n")
        import traceback
        traceback.print_exc()


def example_combined_optimization():
    """
    –ü—Ä–∏–º–µ—Ä –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
    """
    print("=" * 80)
    print("–ü–†–ò–ú–ï–† 5: –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–´–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
    print("=" * 80)

    print("""
    –°—Ü–µ–Ω–∞—Ä–∏–π: –ê–Ω–∞–ª–∏–∑ –ù–ü–ê —Å 100 —Å—Ç–∞—Ç—å—è–º–∏

    –°–¢–†–ê–¢–ï–ì–ò–Ø:
    1. Gemini —Å implicit caching - –ø–µ—Ä–≤–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    2. Claude —Å prompt caching + extended thinking - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π —Å—Ç–∞—Ç—å–∏
    3. Gemini —Å grounding - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ
    4. OpenAI structured outputs - —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞

    –≠–ö–û–ù–û–ú–ò–ö–ê:

    –ë–ï–ó –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π:
    - Gemini: 200K —Ç–æ–∫–µ–Ω–æ–≤ √ó 100 –∑–∞–ø—Ä–æ—Å–æ–≤ = 20M —Ç–æ–∫–µ–Ω–æ–≤ √ó –±–µ—Å–ø–ª–∞—Ç–Ω–æ = $0
    - Claude: 2K system + 1K user √ó 100 √ó 6 —ç—Ç–∞–ø–æ–≤ = 1.8M —Ç–æ–∫–µ–Ω–æ–≤ √ó $3/M = $5.40
    - OpenAI: 100 –æ—Ç—á–µ—Ç–æ–≤ √ó 2K —Ç–æ–∫–µ–Ω–æ–≤ = 200K —Ç–æ–∫–µ–Ω–æ–≤ √ó $10/M = $2.00
    –ò–¢–û–ì–û: ~$7.40

    –° –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏:
    - Gemini: –±–µ—Å–ø–ª–∞—Ç–Ω–æ + implicit caching (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
    - Claude: –∫–µ—à –Ω–∞ system prompts = 90% —ç–∫–æ–Ω–æ–º–∏—è = $0.54
    - OpenAI: structured outputs (—Ç–∞ –∂–µ —Ü–µ–Ω–∞) = $2.00
    –ò–¢–û–ì–û: ~$2.54

    üí∞ –≠–ö–û–ù–û–ú–ò–Ø: $4.86 (66%) –Ω–∞ –æ–¥–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ

    –ö–ê–ß–ï–°–¢–í–û:
    - Extended thinking: +18% —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
    - Grounding: 100% –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ
    - Structured outputs: 0% –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞

    –í–†–ï–ú–Ø:
    - –ë–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: 30-40 –º–∏–Ω—É—Ç
    - –° –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏: 25-35 –º–∏–Ω—É—Ç (thinking –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º—è, –Ω–æ —É–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ)

    ‚ú® –ò–¢–û–ì: –î–µ—à–µ–≤–ª–µ, –±—ã—Å—Ç—Ä–µ–µ, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ!
    """)


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤."""
    print("\n")
    print("‚ïî" + "=" * 78 + "‚ïó")
    print("‚ïë" + " " * 15 + "–ü–†–û–î–í–ò–ù–£–¢–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò LLM –ü–†–û–í–ê–ô–î–ï–†–û–í" + " " * 24 + "‚ïë")
    print("‚ïë" + " " * 25 + "LegalTechKZ Examples" + " " * 34 + "‚ïë")
    print("‚ïö" + "=" * 78 + "‚ïù")
    print()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API –∫–ª—é—á–µ–π
    api_keys = {
        "OpenAI": os.getenv("OPENAI_API_KEY"),
        "Anthropic": os.getenv("ANTHROPIC_API_KEY"),
        "Google": os.getenv("GOOGLE_API_KEY")
    }

    print("üîë –°—Ç–∞—Ç—É—Å API –∫–ª—é—á–µ–π:")
    available_count = 0
    for name, key in api_keys.items():
        if key:
            print(f"   ‚úÖ {name}: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            available_count += 1
        else:
            print(f"   ‚ùå {name}: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    if available_count == 0:
        print("\n‚ö†Ô∏è  –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã API –∫–ª—é—á–∏!")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤:")
        print("   export OPENAI_API_KEY='sk-...'")
        print("   export ANTHROPIC_API_KEY='sk-ant-...'")
        print("   export GOOGLE_API_KEY='AI...'")
        print("\n   –°–º. docs/API_KEYS_SETUP.md –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n")
        return

    print()

    try:
        # –ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ –ø—Ä–∏–º–µ—Ä—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∫–ª—é—á–∏

        if api_keys["Anthropic"]:
            example_prompt_caching()
            print()
            example_extended_thinking()
            print()

        if api_keys["OpenAI"]:
            example_structured_outputs()
            print()

        if api_keys["Google"]:
            example_grounding()
            print()

        # –û–±—â–∏–π –æ–±–∑–æ—Ä (–±–µ–∑ API –≤—ã–∑–æ–≤–æ–≤)
        example_combined_optimization()

        print("\n‚úÖ –ü—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        print("\nüìö –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º.:")
        print("   - docs/ADVANCED_FEATURES_ANALYSIS.md")
        print("   - docs/API_KEYS_SETUP.md\n")

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
