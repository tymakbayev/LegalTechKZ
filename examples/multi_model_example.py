"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π
–∏ pipeline –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö LLM.

Example of using automatic model selection and pipeline
for collaborative multi-LLM processing.
"""

import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from legaltechkz.models.model_router import ModelRouter
from legaltechkz.models.model_pipeline import create_legal_pipeline, create_qa_pipeline


def example_auto_selection():
    """
    –ü—Ä–∏–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞—á–∏.
    """
    print("=" * 70)
    print("–ü—Ä–∏–º–µ—Ä 1: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")
    print("=" * 70)

    # –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º
    router = ModelRouter(enable_auto_selection=True)

    # –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å -> GPT-4.1
    simple_query = "–ß—Ç–æ —Ç–∞–∫–æ–µ –ù–ü–ê?"
    print(f"\nüìù –ó–∞–ø—Ä–æ—Å: {simple_query}")
    model = router.select_model_for_task(simple_query)
    print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model.model_name} ({model.__class__.__name__})")

    # –ü—Ä–∏–º–µ—Ä 2: –ó–∞–¥–∞—á–∞ –Ω–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ -> Claude Sonnet 4.5
    reasoning_query = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∞–≤–æ–≤—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏ 123"
    print(f"\nüìù –ó–∞–ø—Ä–æ—Å: {reasoning_query}")
    model = router.select_model_for_task(reasoning_query)
    print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model.model_name} ({model.__class__.__name__})")

    # –ü—Ä–∏–º–µ—Ä 3: –ë–æ–ª—å—à–æ–π –¥–æ–∫—É–º–µ–Ω—Ç -> Gemini 2.5 Flash
    large_doc_query = "–í–æ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ –∫–æ–¥–µ–∫—Å–∞ –†–ö..."
    large_context = "–ê" * 200000  # –°–∏–º—É–ª—è—Ü–∏—è –±–æ–ª—å—à–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    print(f"\nüìù –ó–∞–ø—Ä–æ—Å: {large_doc_query} (+ {len(large_context)} —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)")
    model = router.select_model_for_task(large_doc_query, context=large_context)
    print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model.model_name} ({model.__class__.__name__})")

    print("\n" + "=" * 70)


def example_pipeline_legal_analysis():
    """
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è pipeline –¥–ª—è –ø—Ä–∞–≤–æ–≤–æ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã.
    """
    print("=" * 70)
    print("–ü—Ä–∏–º–µ—Ä 2: Pipeline –¥–ª—è –ø—Ä–∞–≤–æ–≤–æ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã")
    print("=" * 70)

    # –°–æ–∑–¥–∞—ë–º pipeline –¥–ª—è –ø—Ä–∞–≤–æ–≤–æ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
    pipeline = create_legal_pipeline()

    print("\nüìã –≠—Ç–∞–ø—ã pipeline:")
    for i, stage in enumerate(pipeline.stages, 1):
        print(f"  {i}. {stage.name} ({stage.stage_type})")

    # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ API)
    print("\nüîÑ Pipeline –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å:")
    print("  1. Gemini –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–æ–ª—å—à–æ–π –¥–æ–∫—É–º–µ–Ω—Ç (–∑–∞–∫–æ–Ω/–∫–æ–¥–µ–∫—Å)")
    print("  2. Claude –ø—Ä–æ–≤–æ–¥–∏—Ç –≥–ª—É–±–æ–∫–∏–π –ø—Ä–∞–≤–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑")
    print("  3. GPT-4.1 —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç")

    # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
    # result = pipeline.execute(
    #     initial_input="–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –∏–ª–∏ –∑–∞–∫–æ–Ω–∞...",
    #     return_all_outputs=True
    # )
    # print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['final_output']}")

    print("\n" + "=" * 70)


def example_pipeline_qa():
    """
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è pipeline –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É.
    """
    print("=" * 70)
    print("–ü—Ä–∏–º–µ—Ä 3: Pipeline –¥–ª—è Q&A –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É")
    print("=" * 70)

    # –°–æ–∑–¥–∞—ë–º pipeline –¥–ª—è Q&A
    pipeline = create_qa_pipeline()

    print("\nüìã –≠—Ç–∞–ø—ã pipeline:")
    for i, stage in enumerate(pipeline.stages, 1):
        print(f"  {i}. {stage.name} ({stage.stage_type})")

    # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    # question = "–ö–∞–∫–∏–µ —à—Ç—Ä–∞—Ñ—ã –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ?"
    # document = "–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ–¥–µ–∫—Å–∞ –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö..."
    #
    # result = pipeline.execute(
    #     initial_input=f"–í–æ–ø—Ä–æ—Å: {question}\n\n–î–æ–∫—É–º–µ–Ω—Ç: {document}",
    #     template_vars={"question": question, "document": document},
    #     return_all_outputs=True
    # )

    print("\nüîÑ Pipeline –≤—ã–ø–æ–ª–Ω–∏—Ç:")
    print("  1. Gemini –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ –Ω–∞—Ö–æ–¥–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞—Å—Ç–∏")
    print("  2. Claude –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º")
    print("  3. GPT-4.1 —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")

    print("\n" + "=" * 70)


def example_manual_selection():
    """
    –ü—Ä–∏–º–µ—Ä —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏.
    """
    print("=" * 70)
    print("–ü—Ä–∏–º–µ—Ä 4: –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")
    print("=" * 70)

    router = ModelRouter(enable_auto_selection=False)

    # –†—É—á–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    configs = [
        {"provider": "openai", "model_name": "gpt-4.1"},
        {"provider": "anthropic", "model_name": "claude-sonnet-4-5"},
        {"provider": "gemini", "model_name": "gemini-2.5-flash"}
    ]

    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π:")
    for config in configs:
        model = router.get_model(config)
        print(f"  ‚úÖ {config['provider']}: {model.model_name}")

    print("\n" + "=" * 70)


def example_task_classifier():
    """
    –ü—Ä–∏–º–µ—Ä –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TaskClassifier.
    """
    print("=" * 70)
    print("–ü—Ä–∏–º–µ—Ä 5: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ TaskClassifier")
    print("=" * 70)

    from legaltechkz.models.task_classifier import TaskClassifier

    classifier = TaskClassifier()

    test_cases = [
        ("–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è?", None),
        ("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∞—Ç—å—é 15 –£–ö –†–ö", None),
        ("–í–æ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–∫–æ–Ω–∞ –æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ...", "–ê" * 300000),
    ]

    print("\nüîç –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–¥–∞—á:")
    for prompt, context in test_cases:
        result = classifier.classify_task(prompt, context)
        print(f"\n  –ó–∞–ø—Ä–æ—Å: {prompt[:50]}...")
        if context:
            print(f"  –ö–æ–Ω—Ç–µ–∫—Å—Ç: {len(context)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"  ‚úÖ –ú–æ–¥–µ–ª—å: {result['model']}")
        print(f"  üìä –¢–∏–ø: {result['task_type']}")
        print(f"  üìù –ü—Ä–∏—á–∏–Ω–∞: {result['reason']}")

    print("\n" + "=" * 70)


def main():
    """
    –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤.
    """
    print("\n")
    print("‚ïî" + "=" * 68 + "‚ïó")
    print("‚ïë" + " " * 10 + "–°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –í–´–ë–û–†–ê –ú–û–î–ï–õ–ï–ô" + " " * 19 + "‚ïë")
    print("‚ïë" + " " * 17 + "LegalTechKZ Multi-Model System" + " " * 21 + "‚ïë")
    print("‚ïö" + "=" * 68 + "‚ïù")
    print()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    api_keys = {
        "OpenAI": os.getenv("OPENAI_API_KEY"),
        "Anthropic": os.getenv("ANTHROPIC_API_KEY"),
        "Google": os.getenv("GOOGLE_API_KEY")
    }

    print("üîë –°—Ç–∞—Ç—É—Å API –∫–ª—é—á–µ–π:")
    for name, key in api_keys.items():
        status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if key else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        print(f"  {name}: {status}")

    if not any(api_keys.values()):
        print("\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã API –∫–ª—é—á–∏.")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   - OPENAI_API_KEY")
        print("   - ANTHROPIC_API_KEY")
        print("   - GOOGLE_API_KEY")
        print("\n   –ü—Ä–∏–º–µ—Ä—ã –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ API.\n")

    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
    try:
        example_auto_selection()
        example_pipeline_legal_analysis()
        example_pipeline_qa()
        example_manual_selection()
        example_task_classifier()

        print("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}\n")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
